{"version":3,"sources":["./src/app/pages/register/praticien/praticien.page.html","./src/app/pages/register/praticien/praticien-routing.module.ts","./src/app/pages/register/praticien/praticien.module.ts","./src/app/pages/register/praticien/praticien.page.scss","./src/app/pages/register/praticien/praticien.page.ts","./src/app/services/global-data.service.ts"],"names":[],"mappings":"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","file":"praticien-praticien-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <span *ngIf=\\\"praticienRegisterForm.valid; then myUserName()\\\"></span>\\n    <ion-title slot=\\\"start\\\">Praticien</ion-title>\\n    <ion-title slot=\\\"end\\\" color=\\\"tertiary\\\" class=\\\"identifiant\\\"\\n      >{{_id}}</ion-title\\n    >\\n  </ion-toolbar>\\n</ion-header>\\n\\n<div class=\\\"topContent\\\">\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-title class=\\\"ion-text-center\\\">\\n        <img\\n          src=\\\"../../../../assets/images/logo_matipla.png\\\"\\n          srcset=\\\"\\\"\\n          width=\\\"150px\\\"\\n          class=\\\"mb-2\\\"\\n        />\\n      </ion-card-title>\\n    </ion-card-header>\\n  </ion-card>\\n</div>\\n\\n<ion-content>\\n  <ion-card>\\n    <ion-card-content>\\n      <form [formGroup]=\\\"praticienRegisterForm\\\">\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Nom</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"last_name\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.last_name\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('last_name').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Prénom</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"first_name\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.first_name\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('first_name').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Date de naissance</ion-label>\\n          <ion-datetime\\n            display-format=\\\"MMM DD, YYYY\\\"\\n            formControlName=\\\"date_on_born\\\"\\n            required\\n          ></ion-datetime>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.date_on_born\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('date_on_born').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Sexe</ion-label>\\n          <ion-select placeholder=\\\"Select\\\" formControlName=\\\"sexe\\\" required>\\n            <ion-select-option>Masculin</ion-select-option>\\n            <ion-select-option>Feminin</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.sexe\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('sexe').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\" [disabled]=\\\"!this.functions\\\">\\n          <ion-label position=\\\"stacked\\\">Function</ion-label>\\n          <ion-select placeholder=\\\"Select\\\" formControlName=\\\"function\\\" required>\\n            <ng-container *ngFor=\\\"let item of this.functions\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.NomFonction}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.function\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('function').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\" [disabled]=\\\"!this.country\\\">\\n          <ion-label position=\\\"stacked\\\">Pays</ion-label>\\n          <ion-select\\n            placeholder=\\\"Select\\\"\\n            formControlName=\\\"state\\\"\\n            required\\n            (ionChange)=\\\"getCityByCountry(this.praticienRegisterForm.value['state'])\\\"\\n          >\\n            <ng-container *ngFor=\\\"let item of country\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.nameState}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.state\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('state').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\" [disabled]=\\\"!this.city\\\">\\n          <ion-label position=\\\"stacked\\\">Ville</ion-label>\\n          <ion-select placeholder=\\\"Select\\\" formControlName=\\\"city\\\" required>\\n            <ng-container *ngFor=\\\"let item of this.city\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.nameCity}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.city\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('city').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Email</ion-label>\\n          <ion-input type=\\\"text\\\" required formControlName=\\\"email\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.email\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('email').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Adresse</ion-label>\\n          <ion-textarea required formControlName=\\\"address\\\"></ion-textarea>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.address\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('address').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Télephone</ion-label>\\n          <ion-input type=\\\"text\\\" required formControlName=\\\"phone\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.phone\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('phone').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Password</ion-label>\\n          <ion-input\\n            type=\\\"password\\\"\\n            required\\n            formControlName=\\\"password\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.password\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('password').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-row>\\n          <ion-col>\\n            <ion-button\\n              type=\\\"submit\\\"\\n              color=\\\"sgreen \\\"\\n              expand=\\\"block\\\"\\n              (click)=\\\"register()\\\"\\n              [disabled]=\\\"!praticienRegisterForm.valid\\\"\\n              >Sign Up</ion-button\\n            >\\n          </ion-col>\\n        </ion-row>\\n      </form>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PraticienPage } from './praticien.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PraticienPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PraticienPageRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { PraticienPageRoutingModule } from \"./praticien-routing.module\";\n\nimport { PraticienPage } from \"./praticien.page\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    PraticienPageRoutingModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [PraticienPage],\n})\nexport class PraticienPageModule {}\n","export default \"ion-card {\\n  box-shadow: none !important;\\n}\\n\\n.identifiant {\\n  font-style: italic;\\n  font-size: medium;\\n  color: var(--ion-color-sred);\\n  padding-right: 30px;\\n  font-size: 18px;\\n}\\n\\n.topContent {\\n  background-color: white;\\n}\\n\\n.validation-errors {\\n  color: red;\\n  font-size: 10px;\\n  padding-left: 15px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcmVnaXN0ZXIvcHJhdGljaWVuL3ByYXRpY2llbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSwyQkFBQTtBQUNGOztBQUNBO0VBQ0Usa0JBQUE7RUFDQSxpQkFBQTtFQUNBLDRCQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0FBRUY7O0FBQUE7RUFDRSx1QkFBQTtBQUdGOztBQUFBO0VBQ0UsVUFBQTtFQUNBLGVBQUE7RUFDQSxrQkFBQTtBQUdGIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvcmVnaXN0ZXIvcHJhdGljaWVuL3ByYXRpY2llbi5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY2FyZCB7XHJcbiAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xyXG59XHJcbi5pZGVudGlmaWFudCB7XHJcbiAgZm9udC1zdHlsZTogaXRhbGljO1xyXG4gIGZvbnQtc2l6ZTogbWVkaXVtO1xyXG4gIGNvbG9yOiB2YXIoLS1pb24tY29sb3Itc3JlZCk7XHJcbiAgcGFkZGluZy1yaWdodDogMzBweDtcclxuICBmb250LXNpemU6IDE4cHg7XHJcbn1cclxuLnRvcENvbnRlbnQge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG59XHJcblxyXG4udmFsaWRhdGlvbi1lcnJvcnMge1xyXG4gIGNvbG9yOiByZWQ7XHJcbiAgZm9udC1zaXplOiAxMHB4O1xyXG4gIHBhZGRpbmctbGVmdDogMTVweDtcclxufVxyXG4iXX0= */\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { NavController } from '@ionic/angular';\nimport { IRegisterPraticien } from 'src/app/Interfaces/praticien.interface';\nimport { GlobalDataService } from 'src/app/services/global-data.service';\nimport { PraticienService } from 'src/app/services/praticien.service';\n\n@Component({\n  selector: \"app-praticien\",\n  templateUrl: \"./praticien.page.html\",\n  styleUrls: [\"./praticien.page.scss\"],\n})\nexport class PraticienPage implements OnInit {\n  public praticienRegisterForm: FormGroup;\n  private IDENTIFIANT = \"Identifiant\";\n  public _id = this.IDENTIFIANT;\n  public country;\n  public city;\n  public validRegister = false;\n  public functions;\n  private ROLE = \"ROLE_PRATICIEN\";\n\n  public validation_msg = {\n    first_name: [{ type: \"required\", message: \"Prénom obligatoire\" }],\n    last_name: [{ type: \"required\", message: \"Nom obligatoire\" }],\n    date_on_born: [\n      { type: \"required\", message: \"Date de naissance obligatoire\" },\n    ],\n    state: [{ type: \"required\", message: \"Pays obligatoire\" }],\n    city: [{ type: \"required\", message: \"Selectionner un pays , Ville obligatoire\" }],\n    sexe: [{ type: \"required\", message: \"Sexe obligatoire\" }],\n    address: [{ type: \"required\", message: \"Adresse obligatoire\" }],\n    email: [{ type: \"required\", message: \"Email obligatoire\" }],\n    password: [{ type: \"required\", message: \"Mot de passe obligatoire\" }],\n    function: [{ type: \"required\", message: \"fonction obligatoire\" }],\n    phone: [{ type: \"required\", message: \"Phone obligatoire\" }],\n    father_name: [{ type: \"required\", message: \"Nom du père obligatoire\" }],\n    mother_name: [{ type: \"required\", message: \"Nom de la mère obligatoire\" }],\n  };\n\n  constructor(private praticienSrv: PraticienService, private globalSrvc: GlobalDataService, private navCtrl: NavController) {\n    this.initializeData();\n  }\n\n  ngOnInit() {\n\n  }\n\n  initializeData() {\n    this.createForm();\n    this.globalSrvc.getCountry().subscribe((data) => this.country = data);\n\n    this.praticienSrv.getPraticienFunctions().subscribe((data) => {\n      this.functions = data;\n    });\n  }\n  createForm() {\n    this.praticienRegisterForm = new FormGroup({\n      first_name: new FormControl(\"\", Validators.required),\n      last_name: new FormControl(\"\", Validators.required),\n      date_on_born: new FormControl(\"\", [Validators.required]),\n      state: new FormControl(\"\", [Validators.required]),\n      city: new FormControl(\"\", [Validators.required]),\n      sexe: new FormControl(\"\", [Validators.required]),\n      address: new FormControl(\"\", [Validators.required]),\n      email: new FormControl(\"\", [Validators.required]),\n      password: new FormControl(\"\", [Validators.required]),\n      function: new FormControl(\"\", [Validators.required]),\n      phone: new FormControl(\"\", [Validators.required]),\n    });\n  }\n  register() {\n    console.log(\"register\");\n    if (this.praticienRegisterForm.valid) {\n      Object.keys(this.praticienRegisterForm.value).forEach((key) => {\n        console.log(\"valid\", this.praticienRegisterForm.value[key]);\n      });\n      const dataRegister: IRegisterPraticien = {\n        first_name: this.praticienRegisterForm.value['first_name'],\n        last_name: this.praticienRegisterForm.value['last_name'],\n        date_born: this.praticienRegisterForm.value['date_on_born'],\n        state: this.praticienRegisterForm.value['state'],\n        city: this.praticienRegisterForm.value['city'],\n        sexe: this.praticienRegisterForm.value['sexe'],\n        fonction: this.praticienRegisterForm.value['function'],\n        address: this.praticienRegisterForm.value['address'],\n        email: this.praticienRegisterForm.value['email'],\n        password: this.praticienRegisterForm.value['password'],\n        phone: this.praticienRegisterForm.value['phone'],\n        roles: this.ROLE,\n        username: this._id,\n      }\n      this.praticienSrv.registerPraticien(dataRegister).subscribe(data => {\n        if (data) {\n          console.log(\"PraticienPage -> register -> data\", data)\n          this.navCtrl.navigateRoot('/login');\n        }\n      });\n    } else {\n      console.log(\"NOT valid\", this.praticienRegisterForm);\n    }\n  }\n\n  getRndInt(min = 10000, max = 100000) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  myUserName() {\n    if (!this.praticienRegisterForm.valid || this._id != this.IDENTIFIANT) {\n      return;\n    }\n    if (this.praticienRegisterForm.value['date_on_born'] != '' && this.praticienRegisterForm.value['sexe'] != '') {\n      this._id = this.createUsername(this.praticienRegisterForm.value['date_on_born'], this.praticienRegisterForm.value['sexe'])\n    }\n  }\n\n  createUsername(birth: Date, gender: String) {\n    const birthday = new Date(birth);\n    console.log(\"PatientPage -> createUsername -> birthday\", birthday)\n    const sexe = gender.substring(0, 1);\n    let mois = \"00\";\n    let jour = \"00\";\n    let annee = \"0000\";\n\n    let datChoice = birthday.toString().split(\"/\");\n    mois = birthday.getMonth().toString().substring(0, 1);\n    // console.log(\"PatientPage -> createUsername -> mois\", mois)\n    annee = birthday.getFullYear().toString().substring(1, 2);\n    // annee = birthday.getFullYear()[2];\n    // console.log(\"PatientPage -> createUsername -> annee\", annee)\n    jour = birthday.getDay().toString().substring(0, 1);\n    // jour = birthday.getDay()[0]\n    // console.log(\"PatientPage -> createUsername -> jour\", jour)\n    const username = sexe + annee + mois + jour + this.getRndInt();\n    console.log(\"PatientPage -> createUsername -> username\", username)\n    return username;\n  }\n\n  getCityByCountry(id) {\n    this.globalSrvc.getCity(id).subscribe((data) => this.city = data);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { IUserPraticien } from '../Interfaces/praticien.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalDataService {\n  private url = environment.url_dev;\n  private url_api = environment.url_dev_api;\n  constructor(public http: HttpClient) { }\n\n  getCountry(): Observable<any> {\n    const res = this.http.get<any>(this.url_api + \"country\");\n    res.subscribe(data => {\n      console.log(\"GlobalDataService -> getCountry -> data\", data)\n    })\n    return res;\n  }\n\n  getCity(id): Observable<any> {\n    const res = this.http.get<any>(this.url_api + `city?id=${id}`);\n    console.log(\"GlobalDataService -> constructor -> this.url_api + `city?id=${id}`\", this.url_api + `city?id=${id}`)\n    res.subscribe(data => {\n      console.log(\"GlobalDataService -> getCity -> data\", data)\n    })\n    return res;\n  }\n\n  getCountryByPratictitionerFunction(_idPractitionerFunction) {\n    const res = this.http.post(`${this.url_api}country/fonction`, { id_fonction: _idPractitionerFunction });\n    return res;\n  }\n\n  getCityByPractitionerFunctionAndCountry(_idPractitionerFunction, _idCountry) {\n    const res = this.http.post(`${this.url_api}city/fonction`, { id_fonction: _idPractitionerFunction, id_country: _idCountry });\n    return res;\n  }\n\n  getPractitionerByFunctionCountryAndCity(_idPractitionerFunction, _idCountry, _idCity) {\n    const res = this.http.post(`${this.url_api}praticien/fonction`, { id_fonction: _idPractitionerFunction, id_country: _idCountry, id_city: _idCity });\n    return res;\n  }\n\n  getCenterHealthByCity(_idCity) {\n    const res = this.http.post(`${this.url_api}praticien/centre`, { id: _idCity });\n    return res;\n  }\n\n  getPraticienByCenter(_idCenter) {\n    const res = this.http.post(`${this.url_api}centre/praticien`, { id: _idCenter });\n    return res;\n  }\n\n}\n"],"sourceRoot":"webpack:///"}