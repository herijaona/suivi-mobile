{"version":3,"sources":["webpack:///src/app/pages/register/patient/patient.page.html","webpack:///src/app/pages/global.interaction.ts","webpack:///src/app/pages/register/patient/patient-routing.module.ts","webpack:///src/app/pages/register/patient/patient.module.ts","webpack:///src/app/pages/register/patient/patient.page.scss","webpack:///src/app/pages/register/patient/patient.page.ts","webpack:///src/app/services/global-data.service.ts","webpack:///src/app/services/patient.service.ts"],"names":["GlobalInteraction","toastCtrl","loadingCtrl","alertCtrl","isLoading","msg","create","message","duration","position","toast","present","cssClass","spinner","translucent","then","a","dismiss","id","parent","callback","defaultCallback","_header","array","header","buttons","text","role","handler","console","log","warn","alert","presentToast","providedIn","routes","path","component","PatientPageRoutingModule","imports","forChild","exports","PatientPageModule","declarations","PatientPage","patientSrvc","globalSrvc","navCtrl","globalEl","IDENTIFIANT","_id","ROLE","validRegister","validation_msg","first_name","type","last_name","date_on_born","state","city","sexe","address","email","password","phone","father_name","mother_name","createForm","getCountry","subscribe","data","country","patientRegisterForm","required","type_patient","presentLoading","valid","Object","keys","value","forEach","key","dataRegister","roles","username","undefined","registerPatient","navigateRoot","dismissLoading","min","max","Math","floor","random","createUsername","birth","gender","birthday","Date","substring","mois","jour","annee","datChoice","toString","split","getMonth","getFullYear","getDay","getRndInt","getCity","selector","template","GlobalDataService","http","url","url_dev","url_api","url_dev_api","res","get","_idPractitionerFunction","post","id_fonction","_idCountry","id_country","_idCity","id_city","_idCenter","PatientService","url_apip","excludeTracks","MOCK_DATA_JSON","pipe","element","nomGroupe","designation","_idFamily","_idPraticien","praticien"],"mappings":"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","file":"patient-patient-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <span *ngIf=\\\"patientRegisterForm.valid; then myUserName()\\\"></span>\\n    <ion-title slot=\\\"end\\\" color=\\\"tertiary\\\" class=\\\"identifiant\\\"\\n      >{{this._id}}</ion-title\\n    >\\n    <ion-title slot=\\\"start\\\">Patient</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<div class=\\\"topContent\\\">\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-title class=\\\"ion-text-center\\\">\\n        <img\\n          src=\\\"../../../../assets/images/logo_matipla.png\\\"\\n          srcset=\\\"\\\"\\n          width=\\\"150px\\\"\\n          class=\\\"mb-2\\\"\\n        />\\n      </ion-card-title>\\n    </ion-card-header>\\n  </ion-card>\\n</div>\\n\\n<ion-content>\\n  <ion-card>\\n    <ion-card-content>\\n      <form [formGroup]=\\\"patientRegisterForm\\\">\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Nom</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"last_name\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.last_name\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('last_name').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Prénom</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"first_name\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.first_name\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('first_name').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Adult / Enfant</ion-label>\\n          <ion-select\\n            placeholder=\\\"Type de patient\\\"\\n            formControlName=\\\"type_patient\\\"\\n            required\\n          >\\n            <ion-select-option value=\\\"1\\\">Adult</ion-select-option>\\n            <ion-select-option value=\\\"2\\\">Enfant</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Date de naissance</ion-label>\\n          <ion-datetime\\n            display-format=\\\"MMM DD, YYYY\\\"\\n            formControlName=\\\"date_on_born\\\"\\n            required\\n          ></ion-datetime>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.date_on_born\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('date_on_born').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\" [disabled]=\\\"!this.country\\\">\\n          <ion-label position=\\\"stacked\\\">Pays</ion-label>\\n          <ion-select\\n            placeholder=\\\"Select\\\"\\n            formControlName=\\\"state\\\"\\n            required\\n            (ionChange)=\\\"getCityByCountry(this.patientRegisterForm.value['state'])\\\"\\n          >\\n            <ng-container *ngFor=\\\"let item of country\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.nameState}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.state\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('state').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\" [disabled]=\\\"!this.city\\\">\\n          <ion-label position=\\\"stacked\\\">Ville</ion-label>\\n          <ion-select placeholder=\\\"Select\\\" formControlName=\\\"city\\\" required>\\n            <ng-container *ngFor=\\\"let item of this.city\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.nameCity}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.city\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('city').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Télephone</ion-label>\\n          <ion-input type=\\\"text\\\" required formControlName=\\\"phone\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.phone\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('phone').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Sexe</ion-label>\\n          <ion-select placeholder=\\\"Select\\\" formControlName=\\\"sexe\\\" required>\\n            <ion-select-option>Masculin</ion-select-option>\\n            <ion-select-option>Feminin</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.sexe\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('sexe').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Adresse</ion-label>\\n          <ion-textarea required formControlName=\\\"address\\\"></ion-textarea>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.address\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('address').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item\\n          lines=\\\"full\\\"\\n          *ngIf=\\\"this.patientRegisterForm.value['type_patient'] == 2\\\"\\n        >\\n          <ion-label position=\\\"stacked\\\">Nom du père</ion-label>\\n          <ion-input type=\\\"text\\\" formControlName=\\\"father_name\\\"></ion-input>\\n        </ion-item>\\n        <div\\n          class=\\\"validation-errors\\\"\\n          *ngIf=\\\"this.patientRegisterForm.value['type_patient'] == 2\\\"\\n        >\\n          <ng-container *ngFor=\\\"let validation of validation_msg.father_name\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('father_name').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item\\n          lines=\\\"full\\\"\\n          *ngIf=\\\"this.patientRegisterForm.value['type_patient'] == 2\\\"\\n        >\\n          <ion-label position=\\\"stacked\\\">Nom de la mère</ion-label>\\n          <ion-input type=\\\"text\\\" formControlName=\\\"mother_name\\\"></ion-input>\\n        </ion-item>\\n        <div\\n          class=\\\"validation-errors\\\"\\n          *ngIf=\\\"this.patientRegisterForm.value['type_patient'] == 2\\\"\\n        >\\n          <ng-container *ngFor=\\\"let validation of validation_msg.mother_name\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('mother_name').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Email</ion-label>\\n          <ion-input type=\\\"text\\\" required formControlName=\\\"email\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.email\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('email').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Password</ion-label>\\n          <ion-input\\n            type=\\\"password\\\"\\n            required\\n            formControlName=\\\"password\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.password\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('password').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-row>\\n          <ion-col>\\n            <ion-button\\n              type=\\\"submit\\\"\\n              color=\\\"sgreen \\\"\\n              expand=\\\"block\\\"\\n              (click)=\\\"register()\\\"\\n              [disabled]=\\\"!patientRegisterForm.valid\\\"\\n              >Sign Up</ion-button\\n            >\\n          </ion-col>\\n        </ion-row>\\n      </form>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\";","import { Injectable } from '@angular/core';\r\nimport { LoadingController, ToastController, AlertController } from '@ionic/angular';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class GlobalInteraction {\r\n    isLoading = false;\r\n    constructor(public toastCtrl: ToastController, public loadingCtrl: LoadingController, public alertCtrl: AlertController) { }\r\n\r\n    async presentToast(msg) {\r\n        const toast = await this.toastCtrl.create({\r\n            message: msg,\r\n            duration: 1800,\r\n            position: \"top\",\r\n        });\r\n        toast.present();\r\n    }\r\n\r\n    async presentLoading() {\r\n        this.isLoading = true;\r\n        return await this.loadingCtrl.create({\r\n            cssClass: \"my-loading-class\",\r\n            spinner: \"bubbles\",\r\n            translucent: true,\r\n            duration: 100000,\r\n        }).then(a => {\r\n            a.present().then(() => {\r\n                if (!this.isLoading) {\r\n                    a.dismiss();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    async dismissLoading() {\r\n        if (this.isLoading) {\r\n            this.isLoading = false;\r\n            return await this.loadingCtrl.dismiss();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    async alertDelete(\r\n        id,\r\n        parent,\r\n        msg = \"Tu veux vraiment supprimé cette element ? \",\r\n        callback = this.defaultCallback,\r\n        _header = \"Suppression\",\r\n        array = []\r\n    ) {\r\n        const alert = await this.alertCtrl.create({\r\n            cssClass: \"my-custom-class\",\r\n            header: _header,\r\n            message: msg,\r\n            buttons: [\r\n                {\r\n                    text: \"Cancel\",\r\n                    role: \"cancel\",\r\n                    cssClass: \"secondary\",\r\n                    handler: () => {\r\n                        console.log(\"Confirm Cancel: blah\");\r\n                    },\r\n                },\r\n                {\r\n                    text: \"OK\",\r\n                    handler: () => {\r\n                        console.warn(\"data deleted \" + id);\r\n                        // this.remove(id, array, keyStatus, RefuseStatus);\r\n                        callback(id, parent)\r\n                    },\r\n                },\r\n            ],\r\n        });\r\n        await alert.present();\r\n    }\r\n\r\n    defaultCallback(id, parent) {\r\n        this.presentToast(`this is a default callback ${id} `);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PatientPage } from './patient.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PatientPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PatientPageRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { PatientPageRoutingModule } from \"./patient-routing.module\";\n\nimport { PatientPage } from \"./patient.page\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    PatientPageRoutingModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [PatientPage],\n})\nexport class PatientPageModule {}\n","export default \"ion-card {\\n  box-shadow: none !important;\\n}\\n\\n.identifiant {\\n  font-style: italic;\\n  font-size: medium;\\n  color: var(--ion-color-sred);\\n  padding-right: 30px;\\n  font-size: 18px;\\n}\\n\\n.topContent {\\n  background-color: white;\\n}\\n\\n.validation-errors {\\n  color: red;\\n  font-size: 10px;\\n  padding-left: 15px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcmVnaXN0ZXIvcGF0aWVudC9wYXRpZW50LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLDJCQUFBO0FBQ0Y7O0FBQ0E7RUFDRSxrQkFBQTtFQUNBLGlCQUFBO0VBQ0EsNEJBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7QUFFRjs7QUFBQTtFQUNFLHVCQUFBO0FBR0Y7O0FBREE7RUFDRSxVQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0FBSUYiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9yZWdpc3Rlci9wYXRpZW50L3BhdGllbnQucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNhcmQge1xyXG4gIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcclxufVxyXG4uaWRlbnRpZmlhbnQge1xyXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcclxuICBmb250LXNpemU6IG1lZGl1bTtcclxuICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLXNyZWQpO1xyXG4gIHBhZGRpbmctcmlnaHQ6IDMwcHg7XHJcbiAgZm9udC1zaXplOiAxOHB4O1xyXG59XHJcbi50b3BDb250ZW50IHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxufVxyXG4udmFsaWRhdGlvbi1lcnJvcnMge1xyXG4gIGNvbG9yOiByZWQ7XHJcbiAgZm9udC1zaXplOiAxMHB4O1xyXG4gIHBhZGRpbmctbGVmdDogMTVweDtcclxufVxyXG4iXX0= */\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { NavController } from '@ionic/angular';\nimport { IRegisterPatient } from 'src/app/Interfaces/patient.interface';\nimport { GlobalDataService } from 'src/app/services/global-data.service';\nimport { PatientService } from \"src/app/services/patient.service\";\nimport { GlobalInteraction } from '../../global.interaction';\n\n@Component({\n  selector: \"app-patient\",\n  templateUrl: \"./patient.page.html\",\n  styleUrls: [\"./patient.page.scss\"],\n})\nexport class PatientPage implements OnInit {\n  public patientRegisterForm: FormGroup;\n  private IDENTIFIANT = \"Identifiant\";\n  public _id = this.IDENTIFIANT;\n  public ROLE = \"ROLE_PATIENT\";\n  public country;\n  public city;\n  public validRegister = false;\n  public validation_msg = {\n    first_name: [{ type: \"required\", message: \"Prénom obligatoire\" }],\n    last_name: [{ type: \"required\", message: \"Nom obligatoire\" }],\n    date_on_born: [\n      { type: \"required\", message: \"Date de naissance obligatoire\" },\n    ],\n    state: [{ type: \"required\", message: \"Pays obligatoire\" }],\n    city: [{ type: \"required\", message: \"Selectionner un pays , Ville obligatoire\" }],\n    sexe: [{ type: \"required\", message: \"Sexe obligatoire\" }],\n    address: [{ type: \"required\", message: \"Adresse obligatoire\" }],\n    email: [{ type: \"required\", message: \"Email obligatoire\" }],\n    password: [{ type: \"required\", message: \"Mot de passe obligatoire\" }],\n    phone: [{ type: \"required\", message: \"Phone obligatoire\" }],\n    father_name: [{ type: \"required\", message: \"Nom du père obligatoire\" }],\n    mother_name: [{ type: \"required\", message: \"Nom de la mère obligatoire\" }],\n  };\n\n  constructor(private patientSrvc: PatientService, private globalSrvc: GlobalDataService, private navCtrl: NavController, private globalEl: GlobalInteraction) { }\n\n  ngOnInit() {\n    this.createForm();\n    this.globalSrvc.getCountry().subscribe((data) => this.country = data);\n  }\n\n  createForm() {\n    this.patientRegisterForm = new FormGroup({\n      first_name: new FormControl(\"\", Validators.required),\n      last_name: new FormControl(\"\", Validators.required),\n      date_on_born: new FormControl(\"\", [Validators.required]),\n      state: new FormControl(\"\", [Validators.required]),\n      city: new FormControl(\"\", [Validators.required]),\n      sexe: new FormControl(\"\", [Validators.required]),\n      address: new FormControl(\"\", [Validators.required]),\n      email: new FormControl(\"\", [Validators.required]),\n      password: new FormControl(\"\", [Validators.required]),\n      phone: new FormControl(\"\", [Validators.required]),\n      type_patient: new FormControl(\"\", [Validators.required]),\n      father_name: new FormControl(\"\"),\n      mother_name: new FormControl(\"\"),\n    });\n  }\n\n  async register() {\n    this.globalEl.presentLoading();\n    if (this.patientRegisterForm.valid) {\n      Object.keys(this.patientRegisterForm.value).forEach((key) => {\n        console.log(\"valid\", this.patientRegisterForm.value[key]);\n      });\n      const dataRegister: IRegisterPatient = {\n        first_name: this.patientRegisterForm.value['first_name'],\n        last_name: this.patientRegisterForm.value['last_name'],\n        date_on_born: this.patientRegisterForm.value['date_on_born'],\n        state: this.patientRegisterForm.value['state'],\n        city: this.patientRegisterForm.value['city'],\n        sexe: this.patientRegisterForm.value['sexe'],\n        address: this.patientRegisterForm.value['address'],\n        email: this.patientRegisterForm.value['email'],\n        password: this.patientRegisterForm.value['password'],\n        phone: this.patientRegisterForm.value['phone'],\n        roles: this.ROLE,\n        username: this._id,\n        type_patient: this.patientRegisterForm.value['type_patient'],\n        father_name: this.patientRegisterForm.value['father_name'] == undefined ? '' : this.patientRegisterForm.value['father_name'],\n        mother_name: this.patientRegisterForm.value['mother_name'] == undefined ? '' : this.patientRegisterForm.value['mother_name'],\n      }\n      this.patientSrvc.registerPatient(dataRegister).subscribe(data => {\n        if (data) {\n          this.navCtrl.navigateRoot('/login');\n\n          this.globalEl.dismissLoading();\n        }\n      });\n    } else {\n      console.log(\"NOT valid\", this.patientRegisterForm);\n    }\n  }\n\n  getRndInt(min = 10000, max = 100000) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  myUserName() {\n    if (!this.patientRegisterForm.valid || this._id != this.IDENTIFIANT) {\n      return;\n    }\n    if (this.patientRegisterForm.value['date_on_born'] != '' && this.patientRegisterForm.value['sexe'] != '') {\n      this._id = this.createUsername(this.patientRegisterForm.value['date_on_born'], this.patientRegisterForm.value['sexe'])\n    }\n  }\n\n  createUsername(birth: Date, gender: String) {\n    const birthday = new Date(birth);\n    console.log(\"PatientPage -> createUsername -> birthday\", birthday)\n    const sexe = gender.substring(0, 1);\n    let mois = \"00\";\n    let jour = \"00\";\n    let annee = \"0000\";\n\n    let datChoice = birthday.toString().split(\"/\");\n    mois = birthday.getMonth().toString().substring(0, 1);\n    // console.log(\"PatientPage -> createUsername -> mois\", mois)\n    annee = birthday.getFullYear().toString().substring(1, 2);\n    // annee = birthday.getFullYear()[2];\n    // console.log(\"PatientPage -> createUsername -> annee\", annee)\n    jour = birthday.getDay().toString().substring(0, 1);\n    // jour = birthday.getDay()[0]\n    // console.log(\"PatientPage -> createUsername -> jour\", jour)\n    const username = sexe + annee + mois + jour + this.getRndInt();\n    console.log(\"PatientPage -> createUsername -> username\", username)\n    return username;\n  }\n\n  getCityByCountry(id) {\n    this.globalSrvc.getCity(id).subscribe((data) => this.city = data);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { IUserPraticien } from '../Interfaces/praticien.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalDataService {\n  private url = environment.url_dev;\n  private url_api = environment.url_dev_api;\n  constructor(public http: HttpClient) { }\n\n  getCountry(): Observable<any> {\n    const res = this.http.get<any>(this.url_api + \"country\");\n    res.subscribe(data => {\n      console.log(\"GlobalDataService -> getCountry -> data\", data)\n    })\n    return res;\n  }\n\n  getCity(id): Observable<any> {\n    const res = this.http.get<any>(this.url_api + `city?id=${id}`);\n    console.log(\"GlobalDataService -> constructor -> this.url_api + `city?id=${id}`\", this.url_api + `city?id=${id}`)\n    res.subscribe(data => {\n      console.log(\"GlobalDataService -> getCity -> data\", data)\n    })\n    return res;\n  }\n\n  getCountryByPratictitionerFunction(_idPractitionerFunction) {\n    const res = this.http.post(`${this.url_api}country/fonction`, { id_fonction: _idPractitionerFunction });\n    return res;\n  }\n\n  getCityByPractitionerFunctionAndCountry(_idPractitionerFunction, _idCountry) {\n    const res = this.http.post(`${this.url_api}city/fonction`, { id_fonction: _idPractitionerFunction, id_country: _idCountry });\n    return res;\n  }\n\n  getPractitionerByFunctionCountryAndCity(_idPractitionerFunction, _idCountry, _idCity) {\n    const res = this.http.post(`${this.url_api}praticien/fonction`, { id_fonction: _idPractitionerFunction, id_country: _idCountry, id_city: _idCity });\n    return res;\n  }\n\n  getCenterHealthByCity(_idCity) {\n    const res = this.http.post(`${this.url_api}praticien/centre`, { id: _idCity });\n    return res;\n  }\n\n  getPraticienByCenter(_idCenter) {\n    const res = this.http.post(`${this.url_api}centre/praticien`, { id: _idCenter });\n    return res;\n  }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { IPatient, IRegisterPatient, IVaccinPatient, IProfilePatient, IPatientFamilyGroup } from \"../Interfaces/patient.interface\";\n\nimport { from } from \"rxjs\";\nimport { CONSTANT } from \"src/constant\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport { IUserPraticien } from '../Interfaces/praticien.interface';\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class PatientService {\n  private url = environment.url_dev;\n  private url_api = environment.url_dev_api;\n  private url_apip = environment.url_dev;\n  private rdvData;\n  constructor(public http: HttpClient) { }\n\n  // TODO Get Patients\n  getPatients(): Observable<IPatient[]> {\n    return this.http.get<IPatient[]>(this.url + \"patients\");\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockPatient;\n    //   })\n    // );\n  }\n\n  getAllRdv() {\n    return this.http.get(`${this.url_apip}patients/rdv`);\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockRdvListPatient;\n    //   })\n    // );\n  }\n\n  getTracksRdv(excludeTracks?) {\n    return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n      map((data: any) => {\n        console.log(\"PatientService -> getTracksRdv -> data\", excludeTracks);\n        return data;\n      })\n    );\n  }\n\n  //TODO : Get Vaccin by patient\n  getVaccinByPatient() {\n    return this.http.get<IVaccinPatient[]>(`${this.url_apip}patients/vaccination`);\n\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockVaccinPatient;\n    //   })\n    // );\n  }\n\n  registerPatient(data: IRegisterPatient) {\n    return this.http.post<IRegisterPatient>(`${this.url_api}users`, data);\n    Object.keys(data).forEach((element) => {\n      console.log(\"PatientService -> registerPatient -> element\", element);\n      console.log(\"register => \", data[element]);\n    });\n  }\n\n  getProfile() {\n    return this.http.get<IProfilePatient[]>(`${this.url_apip}patient/profile`);\n\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockPatientProfile;\n    //   })\n    // );\n  }\n\n  updateProfile(data) {\n    return this.http.post(`${this.url_apip}patient/profile/edit`, data);\n  }\n\n  getAssociatedPraticians(): Observable<IUserPraticien[]> {\n    const res = this.http.get<IUserPraticien[]>(`${this.url_apip}patients/praticien`);\n    res.subscribe(data => {\n      console.log(\"PatientService -> constructor -> res\", data);\n    })\n    return res;\n  }\n\n  getFamily() {\n    const res = this.http.get(`${this.url_apip}patients/family`);\n    res.subscribe(data => console.log(\"PatientService -> getFamily -> res\", data))\n    return res;\n  }\n\n  addGroupFamily(nomGroupe) {\n    const data = {\n      designation: nomGroupe,\n    }\n    console.log(\"LL: PatientService -> addGroupFamily -> data\", data)\n    const res = this.http.post(`${this.url_apip}register/group`, data);\n    return res;\n  }\n\n  addGroupFamilyMember(data) {\n    console.log(\"PatientService -> addGroupFamilyMember -> data\", data)\n    const res = this.http.post(`${this.url_api}add/membres`, data);\n    return res;\n  }\n\n  deleteFamilyMember(_idFamily) {\n    const res = this.http.delete(`${this.url_api}family/${_idFamily}`);\n    return res;\n  }\n\n  interventionPraticien(data) {\n    console.log(\"####################LL: PatientService -> interventionPraticien -> data\", data)\n    const res = this.http.post(`${this.url_apip}intervention`, data);\n    return res;\n  }\n\n  chekIfPractitionerIsAssociated(_idPraticien) {\n    const res = this.http.get(`${this.url_apip}patients/check-association/${_idPraticien}`);\n    return res;\n  }\n\n  proposeRdv(data) {\n    const res = this.http.post(`${this.url_apip}add/rdv`, data);\n    return res;\n  }\n\n  cancelRdvProposition(data) {\n    const res = this.http.post(`${this.url_api}cancel/rdv`, data);\n    return res;\n  }\n\n  postVaccinGeneration(_idPraticien) {\n    const res = this.http.post(`${this.url_apip}patient/generation`, { praticien: _idPraticien });\n    return res;\n  }\n\n}\n"]}