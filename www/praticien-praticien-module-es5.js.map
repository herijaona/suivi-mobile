{"version":3,"sources":["webpack:///src/app/pages/register/praticien/praticien.page.html","webpack:///src/app/pages/register/praticien/praticien-routing.module.ts","webpack:///src/app/pages/register/praticien/praticien.module.ts","webpack:///src/app/pages/register/praticien/praticien.page.scss","webpack:///src/app/pages/register/praticien/praticien.page.ts","webpack:///src/app/services/global-data.service.ts"],"names":["routes","path","component","PraticienPageRoutingModule","imports","forChild","exports","PraticienPageModule","declarations","PraticienPage","praticienSrv","globalSrvc","navCtrl","IDENTIFIANT","_id","validRegister","ROLE","validation_msg","first_name","type","message","last_name","date_on_born","state","city","sexe","address","email","password","phone","father_name","mother_name","initializeData","createForm","getCountry","subscribe","data","country","getPraticienFunctions","functions","praticienRegisterForm","required","console","log","valid","Object","keys","value","forEach","key","dataRegister","date_born","fonction","roles","username","registerPraticien","navigateRoot","min","max","Math","floor","random","createUsername","birth","gender","birthday","Date","substring","mois","jour","annee","datChoice","toString","split","getMonth","getFullYear","getDay","getRndInt","id","getCity","selector","template","GlobalDataService","http","url","url_dev","url_api","url_dev_api","res","get","_idPractitionerFunction","post","id_fonction","_idCountry","id_country","_idCity","id_city","_idCenter","providedIn"],"mappings":"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","file":"praticien-praticien-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <span *ngIf=\\\"praticienRegisterForm.valid; then myUserName()\\\"></span>\\n    <ion-title slot=\\\"start\\\">Praticien</ion-title>\\n    <ion-title slot=\\\"end\\\" color=\\\"tertiary\\\" class=\\\"identifiant\\\"\\n      >{{_id}}</ion-title\\n    >\\n  </ion-toolbar>\\n</ion-header>\\n\\n<div class=\\\"topContent\\\">\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-title class=\\\"ion-text-center\\\">\\n        <img\\n          src=\\\"../../../../assets/images/logo_matipla.png\\\"\\n          srcset=\\\"\\\"\\n          width=\\\"150px\\\"\\n          class=\\\"mb-2\\\"\\n        />\\n      </ion-card-title>\\n    </ion-card-header>\\n  </ion-card>\\n</div>\\n\\n<ion-content>\\n  <ion-card>\\n    <ion-card-content>\\n      <form [formGroup]=\\\"praticienRegisterForm\\\">\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Nom</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"last_name\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.last_name\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('last_name').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Prénom</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"first_name\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.first_name\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('first_name').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Date de naissance</ion-label>\\n          <ion-datetime\\n            display-format=\\\"MMM DD, YYYY\\\"\\n            formControlName=\\\"date_on_born\\\"\\n            required\\n          ></ion-datetime>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.date_on_born\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('date_on_born').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Sexe</ion-label>\\n          <ion-select placeholder=\\\"Select\\\" formControlName=\\\"sexe\\\" required>\\n            <ion-select-option>Masculin</ion-select-option>\\n            <ion-select-option>Feminin</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.sexe\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('sexe').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\" [disabled]=\\\"!this.functions\\\">\\n          <ion-label position=\\\"stacked\\\">Function</ion-label>\\n          <ion-select placeholder=\\\"Select\\\" formControlName=\\\"function\\\" required>\\n            <ng-container *ngFor=\\\"let item of this.functions\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.NomFonction}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.function\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('function').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\" [disabled]=\\\"!this.country\\\">\\n          <ion-label position=\\\"stacked\\\">Pays</ion-label>\\n          <ion-select\\n            placeholder=\\\"Select\\\"\\n            formControlName=\\\"state\\\"\\n            required\\n            (ionChange)=\\\"getCityByCountry(this.praticienRegisterForm.value['state'])\\\"\\n          >\\n            <ng-container *ngFor=\\\"let item of country\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.nameState}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.state\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('state').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\" [disabled]=\\\"!this.city\\\">\\n          <ion-label position=\\\"stacked\\\">Ville</ion-label>\\n          <ion-select placeholder=\\\"Select\\\" formControlName=\\\"city\\\" required>\\n            <ng-container *ngFor=\\\"let item of this.city\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.nameCity}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.city\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('city').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Email</ion-label>\\n          <ion-input type=\\\"text\\\" required formControlName=\\\"email\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.email\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('email').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Adresse</ion-label>\\n          <ion-textarea required formControlName=\\\"address\\\"></ion-textarea>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.address\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('address').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Télephone</ion-label>\\n          <ion-input type=\\\"text\\\" required formControlName=\\\"phone\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.phone\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('phone').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Password</ion-label>\\n          <ion-input\\n            type=\\\"password\\\"\\n            required\\n            formControlName=\\\"password\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.password\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienRegisterForm.get('password').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-row>\\n          <ion-col>\\n            <ion-button\\n              type=\\\"submit\\\"\\n              color=\\\"sgreen \\\"\\n              expand=\\\"block\\\"\\n              (click)=\\\"register()\\\"\\n              [disabled]=\\\"!praticienRegisterForm.valid\\\"\\n              >Sign Up</ion-button\\n            >\\n          </ion-col>\\n        </ion-row>\\n      </form>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PraticienPage } from './praticien.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PraticienPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PraticienPageRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { PraticienPageRoutingModule } from \"./praticien-routing.module\";\n\nimport { PraticienPage } from \"./praticien.page\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    PraticienPageRoutingModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [PraticienPage],\n})\nexport class PraticienPageModule {}\n","export default \"ion-card {\\n  box-shadow: none !important;\\n}\\n\\n.identifiant {\\n  font-style: italic;\\n  font-size: medium;\\n  color: var(--ion-color-sred);\\n  padding-right: 30px;\\n  font-size: 18px;\\n}\\n\\n.topContent {\\n  background-color: white;\\n}\\n\\n.validation-errors {\\n  color: red;\\n  font-size: 10px;\\n  padding-left: 15px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcmVnaXN0ZXIvcHJhdGljaWVuL3ByYXRpY2llbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSwyQkFBQTtBQUNGOztBQUNBO0VBQ0Usa0JBQUE7RUFDQSxpQkFBQTtFQUNBLDRCQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0FBRUY7O0FBQUE7RUFDRSx1QkFBQTtBQUdGOztBQUFBO0VBQ0UsVUFBQTtFQUNBLGVBQUE7RUFDQSxrQkFBQTtBQUdGIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvcmVnaXN0ZXIvcHJhdGljaWVuL3ByYXRpY2llbi5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY2FyZCB7XHJcbiAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xyXG59XHJcbi5pZGVudGlmaWFudCB7XHJcbiAgZm9udC1zdHlsZTogaXRhbGljO1xyXG4gIGZvbnQtc2l6ZTogbWVkaXVtO1xyXG4gIGNvbG9yOiB2YXIoLS1pb24tY29sb3Itc3JlZCk7XHJcbiAgcGFkZGluZy1yaWdodDogMzBweDtcclxuICBmb250LXNpemU6IDE4cHg7XHJcbn1cclxuLnRvcENvbnRlbnQge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG59XHJcblxyXG4udmFsaWRhdGlvbi1lcnJvcnMge1xyXG4gIGNvbG9yOiByZWQ7XHJcbiAgZm9udC1zaXplOiAxMHB4O1xyXG4gIHBhZGRpbmctbGVmdDogMTVweDtcclxufVxyXG4iXX0= */\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { NavController } from '@ionic/angular';\nimport { IRegisterPraticien } from 'src/app/Interfaces/praticien.interface';\nimport { GlobalDataService } from 'src/app/services/global-data.service';\nimport { PraticienService } from 'src/app/services/praticien.service';\n\n@Component({\n  selector: \"app-praticien\",\n  templateUrl: \"./praticien.page.html\",\n  styleUrls: [\"./praticien.page.scss\"],\n})\nexport class PraticienPage implements OnInit {\n  public praticienRegisterForm: FormGroup;\n  private IDENTIFIANT = \"Identifiant\";\n  public _id = this.IDENTIFIANT;\n  public country;\n  public city;\n  public validRegister = false;\n  public functions;\n  private ROLE = \"ROLE_PRATICIEN\";\n\n  public validation_msg = {\n    first_name: [{ type: \"required\", message: \"Prénom obligatoire\" }],\n    last_name: [{ type: \"required\", message: \"Nom obligatoire\" }],\n    date_on_born: [\n      { type: \"required\", message: \"Date de naissance obligatoire\" },\n    ],\n    state: [{ type: \"required\", message: \"Pays obligatoire\" }],\n    city: [{ type: \"required\", message: \"Selectionner un pays , Ville obligatoire\" }],\n    sexe: [{ type: \"required\", message: \"Sexe obligatoire\" }],\n    address: [{ type: \"required\", message: \"Adresse obligatoire\" }],\n    email: [{ type: \"required\", message: \"Email obligatoire\" }],\n    password: [{ type: \"required\", message: \"Mot de passe obligatoire\" }],\n    function: [{ type: \"required\", message: \"fonction obligatoire\" }],\n    phone: [{ type: \"required\", message: \"Phone obligatoire\" }],\n    father_name: [{ type: \"required\", message: \"Nom du père obligatoire\" }],\n    mother_name: [{ type: \"required\", message: \"Nom de la mère obligatoire\" }],\n  };\n\n  constructor(private praticienSrv: PraticienService, private globalSrvc: GlobalDataService, private navCtrl: NavController) {\n    this.initializeData();\n  }\n\n  ngOnInit() {\n\n  }\n\n  initializeData() {\n    this.createForm();\n    this.globalSrvc.getCountry().subscribe((data) => this.country = data);\n\n    this.praticienSrv.getPraticienFunctions().subscribe((data) => {\n      this.functions = data;\n    });\n  }\n  createForm() {\n    this.praticienRegisterForm = new FormGroup({\n      first_name: new FormControl(\"\", Validators.required),\n      last_name: new FormControl(\"\", Validators.required),\n      date_on_born: new FormControl(\"\", [Validators.required]),\n      state: new FormControl(\"\", [Validators.required]),\n      city: new FormControl(\"\", [Validators.required]),\n      sexe: new FormControl(\"\", [Validators.required]),\n      address: new FormControl(\"\", [Validators.required]),\n      email: new FormControl(\"\", [Validators.required]),\n      password: new FormControl(\"\", [Validators.required]),\n      function: new FormControl(\"\", [Validators.required]),\n      phone: new FormControl(\"\", [Validators.required]),\n    });\n  }\n  register() {\n    console.log(\"register\");\n    if (this.praticienRegisterForm.valid) {\n      Object.keys(this.praticienRegisterForm.value).forEach((key) => {\n        console.log(\"valid\", this.praticienRegisterForm.value[key]);\n      });\n      const dataRegister: IRegisterPraticien = {\n        first_name: this.praticienRegisterForm.value['first_name'],\n        last_name: this.praticienRegisterForm.value['last_name'],\n        date_born: this.praticienRegisterForm.value['date_on_born'],\n        state: this.praticienRegisterForm.value['state'],\n        city: this.praticienRegisterForm.value['city'],\n        sexe: this.praticienRegisterForm.value['sexe'],\n        fonction: this.praticienRegisterForm.value['function'],\n        address: this.praticienRegisterForm.value['address'],\n        email: this.praticienRegisterForm.value['email'],\n        password: this.praticienRegisterForm.value['password'],\n        phone: this.praticienRegisterForm.value['phone'],\n        roles: this.ROLE,\n        username: this._id,\n      }\n      this.praticienSrv.registerPraticien(dataRegister).subscribe(data => {\n        if (data) {\n          console.log(\"PraticienPage -> register -> data\", data)\n          this.navCtrl.navigateRoot('/login');\n        }\n      });\n    } else {\n      console.log(\"NOT valid\", this.praticienRegisterForm);\n    }\n  }\n\n  getRndInt(min = 10000, max = 100000) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  myUserName() {\n    if (!this.praticienRegisterForm.valid || this._id != this.IDENTIFIANT) {\n      return;\n    }\n    if (this.praticienRegisterForm.value['date_on_born'] != '' && this.praticienRegisterForm.value['sexe'] != '') {\n      this._id = this.createUsername(this.praticienRegisterForm.value['date_on_born'], this.praticienRegisterForm.value['sexe'])\n    }\n  }\n\n  createUsername(birth: Date, gender: String) {\n    const birthday = new Date(birth);\n    console.log(\"PatientPage -> createUsername -> birthday\", birthday)\n    const sexe = gender.substring(0, 1);\n    let mois = \"00\";\n    let jour = \"00\";\n    let annee = \"0000\";\n\n    let datChoice = birthday.toString().split(\"/\");\n    mois = birthday.getMonth().toString().substring(0, 1);\n    // console.log(\"PatientPage -> createUsername -> mois\", mois)\n    annee = birthday.getFullYear().toString().substring(1, 2);\n    // annee = birthday.getFullYear()[2];\n    // console.log(\"PatientPage -> createUsername -> annee\", annee)\n    jour = birthday.getDay().toString().substring(0, 1);\n    // jour = birthday.getDay()[0]\n    // console.log(\"PatientPage -> createUsername -> jour\", jour)\n    const username = sexe + annee + mois + jour + this.getRndInt();\n    console.log(\"PatientPage -> createUsername -> username\", username)\n    return username;\n  }\n\n  getCityByCountry(id) {\n    this.globalSrvc.getCity(id).subscribe((data) => this.city = data);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { IUserPraticien } from '../Interfaces/praticien.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalDataService {\n  private url = environment.url_dev;\n  private url_api = environment.url_dev_api;\n  constructor(public http: HttpClient) { }\n\n  getCountry(): Observable<any> {\n    const res = this.http.get<any>(this.url_api + \"country\");\n    res.subscribe(data => {\n      console.log(\"GlobalDataService -> getCountry -> data\", data)\n    })\n    return res;\n  }\n\n  getCity(id): Observable<any> {\n    const res = this.http.get<any>(this.url_api + `city?id=${id}`);\n    console.log(\"GlobalDataService -> constructor -> this.url_api + `city?id=${id}`\", this.url_api + `city?id=${id}`)\n    res.subscribe(data => {\n      console.log(\"GlobalDataService -> getCity -> data\", data)\n    })\n    return res;\n  }\n\n  getCountryByPratictitionerFunction(_idPractitionerFunction) {\n    const res = this.http.post(`${this.url_api}country/fonction`, { id_fonction: _idPractitionerFunction });\n    return res;\n  }\n\n  getCityByPractitionerFunctionAndCountry(_idPractitionerFunction, _idCountry) {\n    const res = this.http.post(`${this.url_api}city/fonction`, { id_fonction: _idPractitionerFunction, id_country: _idCountry });\n    return res;\n  }\n\n  getPractitionerByFunctionCountryAndCity(_idPractitionerFunction, _idCountry, _idCity) {\n    const res = this.http.post(`${this.url_api}praticien/fonction`, { id_fonction: _idPractitionerFunction, id_country: _idCountry, id_city: _idCity });\n    return res;\n  }\n\n  getCenterHealthByCity(_idCity) {\n    const res = this.http.post(`${this.url_api}praticien/centre`, { id: _idCity });\n    return res;\n  }\n\n  getPraticienByCenter(_idCenter) {\n    const res = this.http.post(`${this.url_api}centre/praticien`, { id: _idCenter });\n    return res;\n  }\n\n}\n"]}