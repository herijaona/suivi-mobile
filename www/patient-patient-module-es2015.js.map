{"version":3,"sources":["./src/app/pages/register/patient/patient.page.html","./src/app/pages/register/patient/patient-routing.module.ts","./src/app/pages/register/patient/patient.module.ts","./src/app/pages/register/patient/patient.page.scss","./src/app/pages/register/patient/patient.page.ts","./src/app/services/global-data.service.ts","./src/app/services/patient.service.ts"],"names":[],"mappings":"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","file":"patient-patient-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <span *ngIf=\\\"patientRegisterForm.valid; then myUserName()\\\"></span>\\n    <ion-title slot=\\\"end\\\" color=\\\"tertiary\\\" class=\\\"identifiant\\\"\\n      >{{this._id}}</ion-title\\n    >\\n    <ion-title slot=\\\"start\\\">Patient</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<div class=\\\"topContent\\\">\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-title class=\\\"ion-text-center\\\">\\n        <img\\n          src=\\\"../../../../assets/images/logo_matipla.png\\\"\\n          srcset=\\\"\\\"\\n          width=\\\"150px\\\"\\n          class=\\\"mb-2\\\"\\n        />\\n      </ion-card-title>\\n    </ion-card-header>\\n  </ion-card>\\n</div>\\n\\n<ion-content>\\n  <ion-card>\\n    <ion-card-content>\\n      <form [formGroup]=\\\"patientRegisterForm\\\">\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Nom</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"last_name\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.last_name\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('last_name').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Prénom</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"first_name\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.first_name\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('first_name').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Adult / Enfant</ion-label>\\n          <ion-select\\n            placeholder=\\\"Type de patient\\\"\\n            formControlName=\\\"type_patient\\\"\\n            required\\n          >\\n            <ion-select-option value=\\\"1\\\">Adult</ion-select-option>\\n            <ion-select-option value=\\\"2\\\">Enfant</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Date de naissance</ion-label>\\n          <ion-datetime\\n            display-format=\\\"MMM DD, YYYY\\\"\\n            formControlName=\\\"date_on_born\\\"\\n            required\\n          ></ion-datetime>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.date_on_born\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('date_on_born').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\" [disabled]=\\\"!this.country\\\">\\n          <ion-label position=\\\"stacked\\\">Pays</ion-label>\\n          <ion-select\\n            placeholder=\\\"Select\\\"\\n            formControlName=\\\"state\\\"\\n            required\\n            (ionChange)=\\\"getCityByCountry(this.patientRegisterForm.value['state'])\\\"\\n          >\\n            <ng-container *ngFor=\\\"let item of country\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.nameState}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.state\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('state').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\" [disabled]=\\\"!this.city\\\">\\n          <ion-label position=\\\"stacked\\\">Ville</ion-label>\\n          <ion-select placeholder=\\\"Select\\\" formControlName=\\\"city\\\" required>\\n            <ng-container *ngFor=\\\"let item of this.city\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.nameCity}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.city\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('city').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Télephone</ion-label>\\n          <ion-input type=\\\"text\\\" required formControlName=\\\"phone\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.phone\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('phone').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Sexe</ion-label>\\n          <ion-select placeholder=\\\"Select\\\" formControlName=\\\"sexe\\\" required>\\n            <ion-select-option>Masculin</ion-select-option>\\n            <ion-select-option>Feminin</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.sexe\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('sexe').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Adresse</ion-label>\\n          <ion-textarea required formControlName=\\\"address\\\"></ion-textarea>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.address\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('address').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item\\n          lines=\\\"full\\\"\\n          *ngIf=\\\"this.patientRegisterForm.value['type_patient'] == 2\\\"\\n        >\\n          <ion-label position=\\\"stacked\\\">Nom du père</ion-label>\\n          <ion-input type=\\\"text\\\" formControlName=\\\"father_name\\\"></ion-input>\\n        </ion-item>\\n        <div\\n          class=\\\"validation-errors\\\"\\n          *ngIf=\\\"this.patientRegisterForm.value['type_patient'] == 2\\\"\\n        >\\n          <ng-container *ngFor=\\\"let validation of validation_msg.father_name\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('father_name').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item\\n          lines=\\\"full\\\"\\n          *ngIf=\\\"this.patientRegisterForm.value['type_patient'] == 2\\\"\\n        >\\n          <ion-label position=\\\"stacked\\\">Nom de la mère</ion-label>\\n          <ion-input type=\\\"text\\\" formControlName=\\\"mother_name\\\"></ion-input>\\n        </ion-item>\\n        <div\\n          class=\\\"validation-errors\\\"\\n          *ngIf=\\\"this.patientRegisterForm.value['type_patient'] == 2\\\"\\n        >\\n          <ng-container *ngFor=\\\"let validation of validation_msg.mother_name\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('mother_name').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Email</ion-label>\\n          <ion-input type=\\\"text\\\" required formControlName=\\\"email\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.email\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('email').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Password</ion-label>\\n          <ion-input\\n            type=\\\"password\\\"\\n            required\\n            formControlName=\\\"password\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.password\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('password').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <ion-row>\\n          <ion-col>\\n            <ion-button\\n              type=\\\"submit\\\"\\n              color=\\\"sgreen \\\"\\n              expand=\\\"block\\\"\\n              (click)=\\\"register()\\\"\\n              [disabled]=\\\"!patientRegisterForm.valid\\\"\\n              >Sign Up</ion-button\\n            >\\n          </ion-col>\\n        </ion-row>\\n      </form>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PatientPage } from './patient.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PatientPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PatientPageRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { PatientPageRoutingModule } from \"./patient-routing.module\";\n\nimport { PatientPage } from \"./patient.page\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    PatientPageRoutingModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [PatientPage],\n})\nexport class PatientPageModule {}\n","export default \"ion-card {\\n  box-shadow: none !important;\\n}\\n\\n.identifiant {\\n  font-style: italic;\\n  font-size: medium;\\n  color: var(--ion-color-sred);\\n  padding-right: 30px;\\n  font-size: 18px;\\n}\\n\\n.topContent {\\n  background-color: white;\\n}\\n\\n.validation-errors {\\n  color: red;\\n  font-size: 10px;\\n  padding-left: 15px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcmVnaXN0ZXIvcGF0aWVudC9wYXRpZW50LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLDJCQUFBO0FBQ0Y7O0FBQ0E7RUFDRSxrQkFBQTtFQUNBLGlCQUFBO0VBQ0EsNEJBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7QUFFRjs7QUFBQTtFQUNFLHVCQUFBO0FBR0Y7O0FBREE7RUFDRSxVQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0FBSUYiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9yZWdpc3Rlci9wYXRpZW50L3BhdGllbnQucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNhcmQge1xyXG4gIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcclxufVxyXG4uaWRlbnRpZmlhbnQge1xyXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcclxuICBmb250LXNpemU6IG1lZGl1bTtcclxuICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLXNyZWQpO1xyXG4gIHBhZGRpbmctcmlnaHQ6IDMwcHg7XHJcbiAgZm9udC1zaXplOiAxOHB4O1xyXG59XHJcbi50b3BDb250ZW50IHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxufVxyXG4udmFsaWRhdGlvbi1lcnJvcnMge1xyXG4gIGNvbG9yOiByZWQ7XHJcbiAgZm9udC1zaXplOiAxMHB4O1xyXG4gIHBhZGRpbmctbGVmdDogMTVweDtcclxufVxyXG4iXX0= */\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { NavController } from '@ionic/angular';\nimport { IRegisterPatient } from 'src/app/Interfaces/patient.interface';\nimport { GlobalDataService } from 'src/app/services/global-data.service';\nimport { PatientService } from \"src/app/services/patient.service\";\nimport { GlobalInteraction } from '../../global.interaction';\n\n@Component({\n  selector: \"app-patient\",\n  templateUrl: \"./patient.page.html\",\n  styleUrls: [\"./patient.page.scss\"],\n})\nexport class PatientPage implements OnInit {\n  public patientRegisterForm: FormGroup;\n  private IDENTIFIANT = \"Identifiant\";\n  public _id = this.IDENTIFIANT;\n  public ROLE = \"ROLE_PATIENT\";\n  public country;\n  public city;\n  public validRegister = false;\n  public validation_msg = {\n    first_name: [{ type: \"required\", message: \"Prénom obligatoire\" }],\n    last_name: [{ type: \"required\", message: \"Nom obligatoire\" }],\n    date_on_born: [\n      { type: \"required\", message: \"Date de naissance obligatoire\" },\n    ],\n    state: [{ type: \"required\", message: \"Pays obligatoire\" }],\n    city: [{ type: \"required\", message: \"Selectionner un pays , Ville obligatoire\" }],\n    sexe: [{ type: \"required\", message: \"Sexe obligatoire\" }],\n    address: [{ type: \"required\", message: \"Adresse obligatoire\" }],\n    email: [{ type: \"required\", message: \"Email obligatoire\" }],\n    password: [{ type: \"required\", message: \"Mot de passe obligatoire\" }],\n    phone: [{ type: \"required\", message: \"Phone obligatoire\" }],\n    father_name: [{ type: \"required\", message: \"Nom du père obligatoire\" }],\n    mother_name: [{ type: \"required\", message: \"Nom de la mère obligatoire\" }],\n  };\n\n  constructor(private patientSrvc: PatientService, private globalSrvc: GlobalDataService, private navCtrl: NavController, private globalEl: GlobalInteraction) { }\n\n  ngOnInit() {\n    this.createForm();\n    this.globalSrvc.getCountry().subscribe((data) => this.country = data);\n  }\n\n  createForm() {\n    this.patientRegisterForm = new FormGroup({\n      first_name: new FormControl(\"\", Validators.required),\n      last_name: new FormControl(\"\", Validators.required),\n      date_on_born: new FormControl(\"\", [Validators.required]),\n      state: new FormControl(\"\", [Validators.required]),\n      city: new FormControl(\"\", [Validators.required]),\n      sexe: new FormControl(\"\", [Validators.required]),\n      address: new FormControl(\"\", [Validators.required]),\n      email: new FormControl(\"\", [Validators.required]),\n      password: new FormControl(\"\", [Validators.required]),\n      phone: new FormControl(\"\", [Validators.required]),\n      type_patient: new FormControl(\"\", [Validators.required]),\n      father_name: new FormControl(\"\"),\n      mother_name: new FormControl(\"\"),\n    });\n  }\n\n  async register() {\n    this.globalEl.presentLoading();\n    if (this.patientRegisterForm.valid) {\n      Object.keys(this.patientRegisterForm.value).forEach((key) => {\n        // console.log(\"valid\", this.patientRegisterForm.value[key]);\n      });\n      const dataRegister: IRegisterPatient = {\n        first_name: this.patientRegisterForm.value['first_name'],\n        last_name: this.patientRegisterForm.value['last_name'],\n        date_on_born: this.patientRegisterForm.value['date_on_born'],\n        state: this.patientRegisterForm.value['state'],\n        city: this.patientRegisterForm.value['city'],\n        sexe: this.patientRegisterForm.value['sexe'],\n        address: this.patientRegisterForm.value['address'],\n        email: this.patientRegisterForm.value['email'],\n        password: this.patientRegisterForm.value['password'],\n        phone: this.patientRegisterForm.value['phone'],\n        roles: this.ROLE,\n        username: this._id,\n        type_patient: this.patientRegisterForm.value['type_patient'],\n        father_name: this.patientRegisterForm.value['father_name'] == undefined ? '' : this.patientRegisterForm.value['father_name'],\n        mother_name: this.patientRegisterForm.value['mother_name'] == undefined ? '' : this.patientRegisterForm.value['mother_name'],\n      }\n      this.patientSrvc.registerPatient(dataRegister).subscribe(data => {\n        if (data) {\n          this.navCtrl.navigateRoot('/login');\n\n        }\n        this.globalEl.dismissLoading();\n\n      });\n    } else {\n      // console.log(\"NOT valid\", this.patientRegisterForm);\n    }\n  }\n\n  getRndInt(min = 10000, max = 100000) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  myUserName() {\n    if (!this.patientRegisterForm.valid || this._id != this.IDENTIFIANT) {\n      return;\n    }\n    if (this.patientRegisterForm.value['date_on_born'] != '' && this.patientRegisterForm.value['sexe'] != '') {\n      this._id = this.createUsername(this.patientRegisterForm.value['date_on_born'], this.patientRegisterForm.value['sexe'])\n    }\n  }\n\n  createUsername(birth: Date, gender: String) {\n    const birthday = new Date(birth);\n    // console.log(\"PatientPage -> createUsername -> birthday\", birthday)\n    const sexe = gender.substring(0, 1);\n    let mois = \"00\";\n    let jour = \"00\";\n    let annee = \"0000\";\n\n    let datChoice = birthday.toString().split(\"/\");\n    mois = birthday.getMonth().toString().substring(0, 1);\n    // console.log(\"PatientPage -> createUsername -> mois\", mois)\n    annee = birthday.getFullYear().toString().substring(1, 2);\n    // annee = birthday.getFullYear()[2];\n    // console.log(\"PatientPage -> createUsername -> annee\", annee)\n    jour = birthday.getDay().toString().substring(0, 1);\n    // jour = birthday.getDay()[0]\n    // console.log(\"PatientPage -> createUsername -> jour\", jour)\n    const username = sexe + annee + mois + jour + this.getRndInt();\n    // console.log(\"PatientPage -> createUsername -> username\", username)\n    return username;\n  }\n\n  getCityByCountry(id) {\n    this.globalSrvc.getCity(id).subscribe((data) => this.city = data);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { IUserPraticien } from '../Interfaces/praticien.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalDataService {\n  private url = environment.url_dev;\n  private url_api = environment.url_dev_api;\n  constructor(public http: HttpClient) { }\n\n  getCountry(): Observable<any> {\n    const res = this.http.get<any>(this.url_api + \"country\");\n    res.subscribe(data => {\n      // console.log(\"GlobalDataService -> getCountry -> data\", data)\n    })\n    return res;\n  }\n\n  getCity(id): Observable<any> {\n    const res = this.http.get<any>(this.url_api + `city?id=${id}`);\n    // console.log(\"GlobalDataService -> constructor -> this.url_api + `city?id=${id}`\", this.url_api + `city?id=${id}`)\n    res.subscribe(data => {\n      // console.log(\"GlobalDataService -> getCity -> data\", data)\n    })\n    return res;\n  }\n\n  getCountryByPratictitionerFunction(_idPractitionerFunction) {\n    const res = this.http.post(`${this.url_api}country/fonction`, { id_fonction: _idPractitionerFunction });\n    return res;\n  }\n\n  getCityByPractitionerFunctionAndCountry(_idPractitionerFunction, _idCountry) {\n    const res = this.http.post(`${this.url_api}city/fonction`, { id_fonction: _idPractitionerFunction, id_country: _idCountry });\n    return res;\n  }\n\n  getPractitionerByFunctionCountryAndCity(_idPractitionerFunction, _idCountry, _idCity) {\n    const res = this.http.post(`${this.url_api}praticien/fonction`, { id_fonction: _idPractitionerFunction, id_country: _idCountry, id_city: _idCity });\n    return res;\n  }\n\n  getCenterHealthByCity(_idCity) {\n    const res = this.http.post(`${this.url_api}praticien/centre`, { id: _idCity });\n    return res;\n  }\n\n  getPraticienByCenter(_idCenter) {\n    const res = this.http.post(`${this.url_api}centre/praticien`, { id: _idCenter });\n    return res;\n  }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { IPatient, IRegisterPatient, IVaccinPatient, IProfilePatient, IPatientFamilyGroup } from \"../Interfaces/patient.interface\";\n\nimport { from } from \"rxjs\";\nimport { CONSTANT } from \"src/constant\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport { IUserPraticien } from '../Interfaces/praticien.interface';\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class PatientService {\n  private url = environment.url_dev;\n  private url_api = environment.url_dev_api;\n  private url_apip = environment.url_dev;\n  private rdvData;\n  constructor(public http: HttpClient) { }\n\n  // TODO Get Patients\n  getPatients(): Observable<IPatient[]> {\n    return this.http.get<IPatient[]>(this.url + \"patients\");\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockPatient;\n    //   })\n    // );\n  }\n\n  getAllRdv() {\n    return this.http.get(`${this.url_apip}patients/rdv`);\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockRdvListPatient;\n    //   })\n    // );\n  }\n\n  getTracksRdv(excludeTracks?) {\n    return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n      map((data: any) => {\n        // console.log(\"PatientService -> getTracksRdv -> data\", excludeTracks);\n        return data;\n      })\n    );\n  }\n\n  //TODO : Get Vaccin by patient\n  getVaccinByPatient() {\n    return this.http.get<IVaccinPatient[]>(`${this.url_apip}patients/vaccination`);\n\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockVaccinPatient;\n    //   })\n    // );\n  }\n\n  registerPatient(data: IRegisterPatient) {\n    return this.http.post<IRegisterPatient>(`${this.url_api}users`, data);\n    Object.keys(data).forEach((element) => {\n      console.log(\"PatientService -> registerPatient -> element\", element);\n      console.log(\"register => \", data[element]);\n    });\n  }\n\n  getProfile() {\n    return this.http.get<IProfilePatient[]>(`${this.url_apip}patient/profile`);\n\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockPatientProfile;\n    //   })\n    // );\n  }\n\n  updateProfile(data) {\n    return this.http.post(`${this.url_apip}patient/profile/edit`, data);\n  }\n\n  getAssociatedPraticians(): Observable<IUserPraticien[]> {\n    const res = this.http.get<IUserPraticien[]>(`${this.url_apip}patients/praticien`);\n    res.subscribe(data => {\n      console.log(\"PatientService -> constructor -> res\", data);\n    })\n    return res;\n  }\n\n  getFamily() {\n    const res = this.http.get(`${this.url_apip}patients/family`);\n    res.subscribe(data => console.log(\"PatientService -> getFamily -> res\", data))\n    return res;\n  }\n\n  addGroupFamily(nomGroupe) {\n    const data = {\n      designation: nomGroupe,\n    }\n    console.log(\"LL: PatientService -> addGroupFamily -> data\", data)\n    const res = this.http.post(`${this.url_apip}register/group`, data);\n    return res;\n  }\n\n  addGroupFamilyMember(data) {\n    console.log(\"PatientService -> addGroupFamilyMember -> data\", data)\n    const res = this.http.post(`${this.url_api}add/membres`, data);\n    return res;\n  }\n\n  deleteFamilyMember(_idFamily) {\n    const res = this.http.delete(`${this.url_api}family/${_idFamily}`);\n    return res;\n  }\n\n  interventionPraticien(data) {\n    console.log(\"####################LL: PatientService -> interventionPraticien -> data\", data)\n    const res = this.http.post(`${this.url_apip}intervention`, data);\n    return res;\n  }\n\n  chekIfPractitionerIsAssociated(_idPraticien) {\n    const res = this.http.get(`${this.url_apip}patients/check-association/${_idPraticien}`);\n    return res;\n  }\n\n  proposeRdv(data) {\n    const res = this.http.post(`${this.url_apip}add/rdv`, data);\n    return res;\n  }\n\n  cancelRdvProposition(data) {\n    const res = this.http.post(`${this.url_api}cancel/rdv`, data);\n    return res;\n  }\n\n  postVaccinGeneration(_idPraticien) {\n    const res = this.http.post(`${this.url_apip}patient/generation`, { praticien: _idPraticien });\n    return res;\n  }\n\n}\n"],"sourceRoot":"webpack:///"}