{"version":3,"sources":["webpack:///src/app/services/data-transformer.service.ts","webpack:///src/app/services/global-data.service.ts","webpack:///src/app/services/patient.service.ts"],"names":["DataTransformerService","list","string_date","dataShow","forEach","element","dataToPush","Object","assign","show","push","listByDate","regroupDataByDate","res","data","dataByDate","groups","reduce","eachData","date","groupArrays","keys","map","sortedActivities","slice","sort","a","b","Date","getTime","query","keysOnFilter","keysStatus","segment","dataToFilter","subKeyParent","subkeysOnFilter","OkStatus","newData","item","goOnSecondFilter","toLowerCase","includes","exculed","key","acceptedString","status","providedIn","GlobalDataService","http","url","url_dev","url_api","url_dev_api","get","subscribe","id","_idPractitionerFunction","post","id_fonction","_idCountry","id_country","_idCity","id_city","_idCenter","PatientService","url_apip","excludeTracks","MOCK_DATA_JSON","pipe","console","log","nomGroupe","designation","_idFamily","_idPraticien","praticien"],"mappings":"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","file":"default~rendez-vous-rendez-vous-module~vaccination-vaccination-module-es5.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { AlertController } from \"@ionic/angular\";\nimport { from, Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DataTransformerService {\n  constructor() { }\n\n  allData(list, string_date = \"date\"): { data: any[]; dataByDate: { date: string; groups: any }[] } {\n    let dataShow: any[] = [];\n    list.forEach((element) => {\n      const dataToPush = Object.assign(element, { show: true });\n      dataShow.push(dataToPush);\n    });\n    const listByDate = this.regroupDataByDate([...dataShow], string_date);\n    const res = {\n      data: dataShow,\n      dataByDate: listByDate,\n    };\n    return res;\n  }\n  // Regrouper les données en fonction de la date\n  regroupDataByDate(data, string_date) {\n    const groups = data.reduce((groups, eachData) => {\n      // console.log(\"regroupDataByDate -> eachData\", eachData)\n      // const date = eachData.date_prise.split(\"T\")[0];\n      const date = eachData[string_date].date;\n      // const date = eachData.date;\n      if (!groups[date]) {\n        groups[date] = [];\n      }\n      groups[date].push(eachData);\n      return groups;\n    }, {});\n\n    const groupArrays = Object.keys(groups).map((date) => {\n      return {\n        date,\n        groups: groups[date],\n      };\n    });\n    const sortedActivities = groupArrays.slice().sort(function (a, b) {\n      return new Date(a.date).getTime() - new Date(b.date).getTime();\n    });\n    return sortedActivities;\n  }\n\n  filterItems(\n    query: any,\n    keysOnFilter: any = [],\n    keysStatus: string = \"status\",\n    segment: String = \"all\",\n    dataToFilter: any = [],\n    subKeyParent = null,\n    subkeysOnFilter?: any,\n    OkStatus: string = \"Accepted\"\n  ) {\n    const newData = [...dataToFilter];\n    newData.forEach((item) => {\n      item.groups.forEach((res) => {\n        let goOnSecondFilter = false;\n        if (segment == \"all\") {\n          if (subKeyParent != null) {\n            for (let element of subkeysOnFilter) {\n              if (\n                res[`${subKeyParent}`][`${element}`]\n                  .toLowerCase()\n                  .includes(query)\n              ) {\n                // console.log(\n                //   \"regroupDataByDate -> subKeyParent true ==========> \",\n                //   res\n                // );\n                res.show = true;\n                goOnSecondFilter = true;\n                break;\n              } else {\n                res.show = false;\n              }\n            }\n          }\n          if (goOnSecondFilter == false) {\n            for (let element of keysOnFilter) {\n              if (res[`${element}`].toLowerCase().includes(query)) {\n                res.show = true;\n                break;\n              } else {\n                res.show = false;\n              }\n            }\n          }\n        } else {\n          if (res[`${keysStatus}`] === OkStatus) {\n            if (subKeyParent) {\n              for (let element of subkeysOnFilter) {\n                if (\n                  res[`${subKeyParent}`][`${element}`]\n                    .toLowerCase()\n                    .includes(query)\n                ) {\n                  res.show = true;\n                  goOnSecondFilter = true;\n                  break;\n                } else {\n                  res.show = false;\n                }\n              }\n            }\n          }\n          if (goOnSecondFilter == false) {\n            for (let element of keysOnFilter) {\n              if (res[`${element}`].toLowerCase().includes(query)) {\n                res.show = true;\n                break;\n              } else {\n                res.show = false;\n              }\n            }\n          }\n        }\n      });\n    });\n    // console.log(\"newData\", newData);\n    return newData;\n  }\n\n  hideOnexclude(\n    exculed: any[] = [],\n    keysOnFilter: any = [],\n    segment: String = \"all\",\n    dataToFilter: any = [],\n    keysStatus: String = \"status\"\n  ) {\n    const newData = [...dataToFilter];\n    newData.forEach((item) => {\n      item.groups.forEach((element) => {\n        if (segment == \"all\") {\n          for (let key of keysOnFilter) {\n            // console.log(\n            //   \"key\",\n            //   key,\n            //   \"exculeded\",\n            //   exculed,\n            //   \"//////////////////////////\",\n            //   element[`${key}`].toLowerCase()\n            // );\n            if (exculed.includes(element[`${key}`].toLowerCase())) {\n              element.show = false;\n              // console.log(\"element.show ---------------- \", element.show);\n              break;\n            } else {\n              element.show = true;\n            }\n          }\n        } else {\n          if (element[`${keysStatus}`] === \"Accepted\") {\n            for (let key of keysOnFilter) {\n              if (exculed.includes(element[`${key}`].toLowerCase())) {\n                element.show = false;\n                break;\n              } else {\n                element.show = true;\n              }\n            }\n          }\n        }\n      });\n    });\n    // console.log(\"newData\", newData);\n    return newData;\n  }\n\n  onlyAccepted(\n    dataToFilter: any = [],\n    keysStatus,\n    acceptedString = \"Accepted\",\n    segment = \"all\"\n  ) {\n    const newData = [...dataToFilter];\n\n    if (segment === \"all\") {\n      newData.forEach((item) => {\n        item.groups.forEach((res) => {\n          res.show = true;\n        });\n      });\n      return newData;\n    }\n    newData.forEach((item) => {\n      item.groups.forEach((res) => {\n        const status = res[`${keysStatus}`];\n        if (status === acceptedString) {\n          res.show = true;\n        } else {\n          res.show = false;\n        }\n      });\n    });\n    return newData;\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { IUserPraticien } from '../Interfaces/praticien.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalDataService {\n  private url = environment.url_dev;\n  private url_api = environment.url_dev_api;\n  constructor(public http: HttpClient) { }\n\n  getCountry(): Observable<any> {\n    const res = this.http.get<any>(this.url_api + \"country\");\n    res.subscribe(data => {\n      // console.log(\"GlobalDataService -> getCountry -> data\", data)\n    })\n    return res;\n  }\n\n  getCity(id): Observable<any> {\n    const res = this.http.get<any>(this.url_api + `city?id=${id}`);\n    // console.log(\"GlobalDataService -> constructor -> this.url_api + `city?id=${id}`\", this.url_api + `city?id=${id}`)\n    res.subscribe(data => {\n      // console.log(\"GlobalDataService -> getCity -> data\", data)\n    })\n    return res;\n  }\n\n  getCountryByPratictitionerFunction(_idPractitionerFunction) {\n    const res = this.http.post(`${this.url_api}country/fonction`, { id_fonction: _idPractitionerFunction });\n    return res;\n  }\n\n  getCityByPractitionerFunctionAndCountry(_idPractitionerFunction, _idCountry) {\n    const res = this.http.post(`${this.url_api}city/fonction`, { id_fonction: _idPractitionerFunction, id_country: _idCountry });\n    return res;\n  }\n\n  getPractitionerByFunctionCountryAndCity(_idPractitionerFunction, _idCountry, _idCity) {\n    const res = this.http.post(`${this.url_api}praticien/fonction`, { id_fonction: _idPractitionerFunction, id_country: _idCountry, id_city: _idCity });\n    return res;\n  }\n\n  getCenterHealthByCity(_idCity) {\n    const res = this.http.post(`${this.url_api}praticien/centre`, { id: _idCity });\n    return res;\n  }\n\n  getPraticienByCenter(_idCenter) {\n    const res = this.http.post(`${this.url_api}centre/praticien`, { id: _idCenter });\n    return res;\n  }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { IPatient, IRegisterPatient, IVaccinPatient, IProfilePatient, IPatientFamilyGroup } from \"../Interfaces/patient.interface\";\n\nimport { from } from \"rxjs\";\nimport { CONSTANT } from \"src/constant\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport { IUserPraticien } from '../Interfaces/praticien.interface';\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class PatientService {\n  private url = environment.url_dev;\n  private url_api = environment.url_dev_api;\n  private url_apip = environment.url_dev;\n  private rdvData;\n  constructor(public http: HttpClient) { }\n\n  // TODO Get Patients\n  getPatients(): Observable<IPatient[]> {\n    return this.http.get<IPatient[]>(this.url + \"patients\");\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockPatient;\n    //   })\n    // );\n  }\n\n  getAllRdv() {\n    return this.http.get(`${this.url_apip}patients/rdv`);\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockRdvListPatient;\n    //   })\n    // );\n  }\n\n  getTracksRdv(excludeTracks?) {\n    return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n      map((data: any) => {\n        // console.log(\"PatientService -> getTracksRdv -> data\", excludeTracks);\n        return data;\n      })\n    );\n  }\n\n  //TODO : Get Vaccin by patient\n  getVaccinByPatient() {\n    return this.http.get<IVaccinPatient[]>(`${this.url_apip}patients/vaccination`);\n\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockVaccinPatient;\n    //   })\n    // );\n  }\n\n  registerPatient(data: IRegisterPatient) {\n    return this.http.post<IRegisterPatient>(`${this.url_api}users`, data);\n    Object.keys(data).forEach((element) => {\n      console.log(\"PatientService -> registerPatient -> element\", element);\n      console.log(\"register => \", data[element]);\n    });\n  }\n\n  getProfile() {\n    return this.http.get<IProfilePatient[]>(`${this.url_apip}patient/profile`);\n\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockPatientProfile;\n    //   })\n    // );\n  }\n\n  updateProfile(data) {\n    return this.http.post(`${this.url_apip}patient/profile/edit`, data);\n  }\n\n  getAssociatedPraticians(): Observable<IUserPraticien[]> {\n    const res = this.http.get<IUserPraticien[]>(`${this.url_apip}patients/praticien`);\n    res.subscribe(data => {\n      console.log(\"PatientService -> constructor -> res\", data);\n    })\n    return res;\n  }\n\n  getFamily() {\n    const res = this.http.get(`${this.url_apip}patients/family`);\n    res.subscribe(data => console.log(\"PatientService -> getFamily -> res\", data))\n    return res;\n  }\n\n  addGroupFamily(nomGroupe) {\n    const data = {\n      designation: nomGroupe,\n    }\n    console.log(\"LL: PatientService -> addGroupFamily -> data\", data)\n    const res = this.http.post(`${this.url_apip}register/group`, data);\n    return res;\n  }\n\n  addGroupFamilyMember(data) {\n    console.log(\"PatientService -> addGroupFamilyMember -> data\", data)\n    const res = this.http.post(`${this.url_api}add/membres`, data);\n    return res;\n  }\n\n  deleteFamilyMember(_idFamily) {\n    const res = this.http.delete(`${this.url_api}family/${_idFamily}`);\n    return res;\n  }\n\n  interventionPraticien(data) {\n    console.log(\"####################LL: PatientService -> interventionPraticien -> data\", data)\n    const res = this.http.post(`${this.url_apip}intervention`, data);\n    return res;\n  }\n\n  chekIfPractitionerIsAssociated(_idPraticien) {\n    const res = this.http.get(`${this.url_apip}patients/check-association/${_idPraticien}`);\n    return res;\n  }\n\n  proposeRdv(data) {\n    const res = this.http.post(`${this.url_apip}add/rdv`, data);\n    return res;\n  }\n\n  cancelRdvProposition(data) {\n    const res = this.http.post(`${this.url_api}cancel/rdv`, data);\n    return res;\n  }\n\n  postVaccinGeneration(_idPraticien) {\n    const res = this.http.post(`${this.url_apip}patient/generation`, { praticien: _idPraticien });\n    return res;\n  }\n\n}\n"]}