{"version":3,"sources":["webpack:///src/app/pages/patient/profile/profile.page.html","webpack:///src/app/pages/praticien/profile/profile.page.html","webpack:///src/app/pages/patient/profile/profile-routing.module.ts","webpack:///src/app/pages/patient/profile/profile.module.ts","webpack:///src/app/pages/patient/profile/profile.page.scss","webpack:///src/app/pages/patient/profile/profile.page.ts","webpack:///src/app/pages/praticien/profile/profile-routing.module.ts","webpack:///src/app/pages/praticien/profile/profile.module.ts","webpack:///src/app/pages/praticien/profile/profile.page.scss","webpack:///src/app/pages/praticien/profile/profile.page.ts","webpack:///src/app/services/global-data.service.ts","webpack:///src/app/services/patient.service.ts"],"names":["routes","path","component","ProfilePageRoutingModule","imports","forChild","exports","ProfilePageModule","declarations","ProfilePage","patienSrvc","globalSrvc","globalInteract","loadingController","_id","OK","isLoading","validation_msg","first_name","type","message","last_name","date_on_born","state","city","sexe","address","email","password","phone","father_name","mother_name","getCountry","subscribe","result","countries","getProfile","presentLoading","data","patientRegisterForm","birthday","required","countryBorn","cityBorn","gender","typePatient","addControl","valid","Object","keys","value","forEach","key","data_updated","fatherName","undefined","id","profile","motherName","nameCity","nameState","updateProfile","dismissLoading","presentToast","e1","e2","namestate","getCity","data2","cities","data3","citiesBorn","dateOnBorn","date","createdAt","buildForm","type_patient","object","find","selector","template","praticienSrvc","praticienFormGroup","response","centre_name","centreName","countryFonction","CityFonction","dateBorn","GlobalDataService","http","url","url_dev","url_api","url_dev_api","res","get","_idPractitionerFunction","post","id_fonction","_idCountry","id_country","_idCity","id_city","_idCenter","providedIn","PatientService","url_apip","excludeTracks","MOCK_DATA_JSON","pipe","element","console","log","nomGroupe","designation","_idFamily","_idPraticien","praticien"],"mappings":"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","file":"profile-profile-module-es5.js","sourcesContent":["export default \"<ion-header translucent=\\\"true\\\">\\n  <ion-toolbar>\\n    <ion-buttons *ngIf=\\\"!ios\\\" slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n      <ion-title slot=\\\"start\\\">Profile</ion-title>\\n    </ion-buttons>\\n\\n    <ion-menu-button *ngIf=\\\"ios\\\"></ion-menu-button>\\n\\n    <ion-title slot=\\\"end\\\" color=\\\"tertiary\\\" class=\\\"identifiant\\\" *ngIf=\\\"profile\\\">{{profile.username}}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <div class=\\\"card\\\">\\n    <div class=\\\"header\\\">\\n      <div class=\\\"avatar\\\">\\n        <img src=\\\"./../../../../assets/images/praticien.jpg\\\" alt=\\\"\\\" />\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"card-body\\\" *ngIf=\\\"profile\\\">\\n    <div class=\\\"user-meta ion-text-center\\\">\\n      <h3 class=\\\"playername\\\">\\n        {{profile.firstName}} {{profile.lastName}} ({{type_patient}})\\n      </h3>\\n      <h6 class=\\\"ranking\\\">\\n        Date de création:\\n        <ion-chip>\\n          <ion-label>{{profile.createdAt | date:\\\"MMM dd, yyyy\\\"}}</ion-label>\\n        </ion-chip>\\n      </h6>\\n    </div>\\n    <div>\\n      <form [formGroup]=\\\"patientRegisterForm\\\">\\n        <!-- Date de naissance -->\\n        <ion-item lines=\\\"full\\\" disabled>\\n          <ion-label position=\\\"stacked\\\">Date de naissance</ion-label>\\n          <ion-datetime\\n            display-format=\\\"MMM DD, YYYY\\\"\\n            picker-format=\\\"MMM DD, YYYY\\\"\\n            [ngModel]=\\\"profile.dateOnBorn\\\"\\n            formControlName=\\\"birthday\\\"\\n            required></ion-datetime>\\n        </ion-item>\\n        <!-- Pays -->\\n        <ion-item\\n          lines=\\\"full\\\"\\n          [disabled]=\\\"!this.profile.nameState &&!this.countries\\\">\\n          <ion-label position=\\\"stacked\\\">Pays</ion-label>\\n          <ion-select\\n            formControlName=\\\"state\\\"\\n            required\\n            (ionChange)=\\\"getCityByCountry(this.patientRegisterForm.value['state'])\\\"\\n            [compareWith]=\\\"compareFnInv\\\"\\n            [ngModel]=\\\"profile.nameState\\\">\\n            <ng-container *ngFor=\\\"let item of this.countries\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\">{{item.nameState}}</ion-select-option>\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.state\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('state').hasError(validation.type)\\\">\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <!-- Téléphone -->\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Phone</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"phone\\\"\\n            [ngModel]=\\\"profile.phone\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.phone\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('phone').hasError(validation.type)\\\">\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n        <!-- Ville -->\\n        <ion-item\\n          lines=\\\"full\\\"\\n          [disabled]=\\\"!this.profile.nameCity\\\"\\n          *ngIf=\\\"this.cities\\\">\\n          <ion-label position=\\\"stacked\\\">Ville</ion-label>\\n          <ion-select\\n            formControlName=\\\"city\\\"\\n            required\\n            [(ngModel)]=\\\"profile.nameCity\\\"\\n            [compareWith]=\\\"compareFnInv\\\">\\n            <ng-container *ngFor=\\\"let item of this.cities\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\">{{item.nameCity}}</ion-select-option>\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <!-- Pays de naissance -->\\n        <ion-item\\n          lines=\\\"full\\\"\\n          [disabled]=\\\"!this.profile.countryBorn &&!this.countries\\\">\\n          <ion-label position=\\\"stacked\\\">Pays de naissance</ion-label>\\n          <ion-select\\n            formControlName=\\\"countryBorn\\\"\\n            required\\n            (ionChange)=\\\"getCityByCountryBorn(this.patientRegisterForm.value['countryBorn'])\\\"\\n            [compareWith]=\\\"compareFnInv\\\"\\n            [ngModel]=\\\"profile.countryBorn\\\">\\n            <ng-container *ngFor=\\\"let item of this.countries\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\">{{item.nameState}}</ion-select-option>\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.state\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"patientRegisterForm.get('state').hasError(validation.type)\\\">\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n        <!-- Ville de naissance -->\\n        <ion-item\\n          lines=\\\"full\\\"\\n          [disabled]=\\\"!this.profile.cityBorn\\\"\\n          *ngIf=\\\"this.citiesBorn\\\">\\n          <ion-label position=\\\"stacked\\\">Ville de naissance</ion-label>\\n          <ion-select\\n            formControlName=\\\"cityBorn\\\"\\n            required\\n            [(ngModel)]=\\\"profile.cityBorn\\\"\\n            [compareWith]=\\\"compareFnInv\\\">\\n            <ng-container *ngFor=\\\"let item of this.citiesBorn\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\">{{item.nameCity}}</ion-select-option>\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <!-- Sexe -->\\n        <ion-item lines=\\\"full\\\" disabled>\\n          <ion-label position=\\\"stacked\\\">Sexe</ion-label>\\n          <ion-select\\n            placeholder=\\\"Select\\\"\\n            formControlName=\\\"gender\\\"\\n            required\\n            [ngModel]=\\\"profile.sexe\\\">\\n            <ion-select-option>Masculin</ion-select-option>\\n            <ion-select-option>Feminin</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <!-- Adresse -->\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Adresse</ion-label>\\n          <ion-textarea\\n            required\\n            formControlName=\\\"address\\\"\\n            [ngModel]=\\\"profile.address\\\"></ion-textarea>\\n        </ion-item>\\n        <!-- Email -->\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Email</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"email\\\"\\n            [ngModel]=\\\"profile.email\\\"></ion-input>\\n          <!-- <div\\n            style=\\\"color: red; padding-top: 0.2rem\\\"\\n            *ngIf=\\\"patientRegisterForm.hasError('required', 'email')\\\"\\n          ></div> -->\\n          <!-- <div\\n            *ngIf=\\\"!patientRegisterForm.controls.email.valid &&\\n            patientRegisterForm.controls.email.dirty\\\"\\n            class=\\\"validator-error\\\"\\n          >\\n            Please enter a valid email.\\n          </div> -->\\n        </ion-item>\\n        <!-- Nom du père -->\\n        <ion-item lines=\\\"full\\\" *ngIf=\\\"profile.fatherName\\\">\\n          <ion-label position=\\\"stacked\\\">Nom du père</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"father_name\\\"\\n            [ngModel]=\\\"this.profile.fatherName\\\"></ion-input>\\n        </ion-item>\\n        <!-- Nom de la mère -->\\n        <ion-item lines=\\\"full\\\" *ngIf=\\\"profile.motherName\\\">\\n          <ion-label position=\\\"stacked\\\">Nom de la mère</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"mother_name\\\"\\n            [ngModel]=\\\"this.profile.motherName\\\"></ion-input>\\n        </ion-item>\\n\\n        <ion-row>\\n          <ion-col>\\n            <ion-button\\n              type=\\\"submit\\\"\\n              color=\\\"sgreen\\\" expand=\\\"full\\\"\\n              (click)=\\\"update()\\\">Modifier</ion-button>\\n          </ion-col>\\n        </ion-row>\\n      </form>\\n    </div>\\n  </div>\\n</ion-content>\\n\";","export default \"<ion-header translucent=\\\"true\\\">\\n  <ion-toolbar>\\n    <ion-buttons *ngIf=\\\"!ios\\\" slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n      <ion-title slot=\\\"start\\\">Profile</ion-title>\\n    </ion-buttons>\\n\\n    <ion-menu-button *ngIf=\\\"ios\\\"></ion-menu-button>\\n\\n    <ion-title slot=\\\"end\\\" color=\\\"tertiary\\\" class=\\\"identifiant\\\" *ngIf=\\\"profile\\\"\\n      >{{profile.username}}</ion-title\\n    >\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <div class=\\\"card\\\">\\n    <div class=\\\"header\\\">\\n      <div class=\\\"avatar\\\">\\n        <img src=\\\"./../../../../assets/images/praticien.jpg\\\" alt=\\\"\\\" />\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"card-body\\\" *ngIf=\\\"profile\\\">\\n    <div class=\\\"user-meta ion-text-center\\\">\\n      <h3 class=\\\"playername\\\">\\n        {{profile.firstName}} {{profile.lastName}} ({{centre_name}})\\n      </h3>\\n      <h6 class=\\\"ranking\\\">\\n        Date de création:\\n        <ion-chip>\\n          <ion-label>{{profile.createdAt | date:\\\"MMM dd, yyyy\\\"}}</ion-label>\\n        </ion-chip>\\n      </h6>\\n    </div>\\n    <div>\\n      <form [formGroup]=\\\"praticienFormGroup\\\">\\n        <!-- Date de naissance -->\\n        <ion-item lines=\\\"full\\\" disabled>\\n          <ion-label position=\\\"stacked\\\">Date de naissance</ion-label>\\n          <ion-datetime\\n            display-format=\\\"MMM DD, YYYY\\\"\\n            picker-format=\\\"MMM DD, YYYY\\\"\\n            [ngModel]=\\\"profile.dateOnBorn\\\"\\n            formControlName=\\\"birthday\\\"\\n            required\\n          ></ion-datetime>\\n        </ion-item>\\n        <!-- Pays -->\\n        <ion-item\\n          lines=\\\"full\\\"\\n          [disabled]=\\\"!this.profile.nameState &&!this.countries\\\"\\n        >\\n          <ion-label position=\\\"stacked\\\">Pays</ion-label>\\n          <ion-select\\n            formControlName=\\\"state\\\"\\n            required\\n            (ionChange)=\\\"getCityByCountry(this.praticienFormGroup.value['state'])\\\"\\n            [compareWith]=\\\"compareFnInv\\\"\\n            [ngModel]=\\\"profile.nameState\\\"\\n          >\\n            <ng-container *ngFor=\\\"let item of this.countries\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.nameState}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.state\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienFormGroup.get('state').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <!-- Téléphone -->\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Phone</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"phone\\\"\\n            [ngModel]=\\\"profile.phone\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.phone\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienFormGroup.get('phone').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n        <!-- Ville -->\\n        <ion-item\\n          lines=\\\"full\\\"\\n          [disabled]=\\\"!this.profile.nameCity\\\"\\n          *ngIf=\\\"this.cities\\\"\\n        >\\n          <ion-label position=\\\"stacked\\\">Ville</ion-label>\\n          <ion-select\\n            formControlName=\\\"city\\\"\\n            required\\n            [(ngModel)]=\\\"profile.nameCity\\\"\\n            [compareWith]=\\\"compareFnInv\\\"\\n          >\\n            <ng-container *ngFor=\\\"let item of this.cities\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.nameCity}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <!-- Pays de naissance -->\\n        <ion-item\\n          lines=\\\"full\\\"\\n          [disabled]=\\\"!this.profile.countryBorn &&!this.countries\\\"\\n        >\\n          <ion-label position=\\\"stacked\\\">Pays de naissance</ion-label>\\n          <ion-select\\n            formControlName=\\\"countryBorn\\\"\\n            required\\n            (ionChange)=\\\"getCityByCountryBorn(this.praticienFormGroup.value['countryBorn'])\\\"\\n            [compareWith]=\\\"compareFnInv\\\"\\n            [ngModel]=\\\"profile.countryBorn\\\"\\n          >\\n            <ng-container *ngFor=\\\"let item of this.countries\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.nameState}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validation_msg.state\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"praticienFormGroup.get('state').hasError(validation.type)\\\"\\n            >\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n        <!-- Ville de naissance -->\\n        <ion-item\\n          lines=\\\"full\\\"\\n          [disabled]=\\\"!this.profile.cityBorn\\\"\\n          *ngIf=\\\"this.citiesBorn\\\"\\n        >\\n          <ion-label position=\\\"stacked\\\">Ville de naissance</ion-label>\\n          <ion-select\\n            formControlName=\\\"cityBorn\\\"\\n            required\\n            [(ngModel)]=\\\"profile.cityBorn\\\"\\n            [compareWith]=\\\"compareFnInv\\\"\\n          >\\n            <ng-container *ngFor=\\\"let item of this.citiesBorn\\\">\\n              <ion-select-option value=\\\"{{item.id}}\\\"\\n                >{{item.nameCity}}</ion-select-option\\n              >\\n            </ng-container>\\n          </ion-select>\\n        </ion-item>\\n        <!-- Sexe -->\\n        <ion-item lines=\\\"full\\\" disabled>\\n          <ion-label position=\\\"stacked\\\">Sexe</ion-label>\\n          <ion-select\\n            placeholder=\\\"Select\\\"\\n            formControlName=\\\"gender\\\"\\n            required\\n            [ngModel]=\\\"profile.sexe\\\"\\n          >\\n            <ion-select-option>Masculin</ion-select-option>\\n            <ion-select-option>Feminin</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <!-- Adresse -->\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Adresse</ion-label>\\n          <ion-textarea\\n            required\\n            formControlName=\\\"address\\\"\\n            [ngModel]=\\\"profile.address\\\"\\n          ></ion-textarea>\\n        </ion-item>\\n        <!-- Email -->\\n        <ion-item lines=\\\"full\\\">\\n          <ion-label position=\\\"stacked\\\">Email</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"email\\\"\\n            [ngModel]=\\\"profile.email\\\"\\n          ></ion-input>\\n          <!-- <div\\n            style=\\\"color: red; padding-top: 0.2rem\\\"\\n            *ngIf=\\\"praticienFormGroup.hasError('required', 'email')\\\"\\n          ></div> -->\\n          <!-- <div\\n            *ngIf=\\\"!praticienFormGroup.controls.email.valid &&\\n            praticienFormGroup.controls.email.dirty\\\"\\n            class=\\\"validator-error\\\"\\n          >\\n            Please enter a valid email.\\n          </div> -->\\n        </ion-item>\\n        <!-- Nom du père -->\\n        <ion-item lines=\\\"full\\\" *ngIf=\\\"profile.fatherName\\\">\\n          <ion-label position=\\\"stacked\\\">Nom du père</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"father_name\\\"\\n            [ngModel]=\\\"this.profile.fatherName\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <!-- Nom de la mère -->\\n        <ion-item lines=\\\"full\\\" *ngIf=\\\"profile.motherName\\\">\\n          <ion-label position=\\\"stacked\\\">Nom de la mère</ion-label>\\n          <ion-input\\n            type=\\\"text\\\"\\n            required\\n            formControlName=\\\"mother_name\\\"\\n            [ngModel]=\\\"this.profile.motherName\\\"\\n          ></ion-input>\\n        </ion-item>\\n\\n        <ion-row>\\n          <ion-col>\\n            <ion-button\\n              type=\\\"submit\\\"\\n              color=\\\"sgreen\\\"\\n              expand=\\\"full\\\"\\n              (click)=\\\"update()\\\"\\n              >Modifier</ion-button\\n            >\\n          </ion-col>\\n        </ion-row>\\n      </form>\\n    </div>\\n  </div>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ProfilePage } from './profile.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProfilePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProfilePageRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { ProfilePageRoutingModule } from \"./profile-routing.module\";\n\nimport { ProfilePage } from \"./profile.page\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ProfilePageRoutingModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [ProfilePage],\n})\nexport class ProfilePageModule {}\n","export default \"@charset \\\"UTF-8\\\";\\nion-content {\\n  position: relative;\\n  height: 100%;\\n  width: 100%;\\n}\\nion-toolbar {\\n  background: transparent;\\n}\\n.card {\\n  background: url('doctor.jpg') no-repeat top center/cover fixed, #fff;\\n  margin: 0 auto;\\n}\\n.card .header {\\n  height: 200px;\\n}\\n.card .header .avatar {\\n  width: 160px;\\n  height: 160px;\\n  position: relative;\\n  margin: 0 auto;\\n}\\n.card .header .avatar img {\\n  display: block;\\n  border-radius: 50%;\\n  position: absolute;\\n  bottom: calc(-1 * (80px + 4px));\\n  border: 8px solid var(--ion-color-sgreen);\\n  background-color: #fff;\\n}\\n.card-body {\\n  background-color: #ffffff;\\n  padding: 30px;\\n  height: calc(100vh – (200px + 56px));\\n  overflow: hidden;\\n}\\n.card-body .user-meta {\\n  padding-top: 40px;\\n}\\n.card-body .user-meta .playername {\\n  font-size: 24px;\\n  font-weight: 600;\\n  color: #303940;\\n}\\n.card-body .user-meta .country {\\n  font-size: 90%;\\n  color: #949ea6;\\n  text-transform: uppercase;\\n  margin: 0 auto;\\n}\\n.identifiant {\\n  font-style: italic;\\n  font-size: medium;\\n  color: var(--ion-color-sred);\\n  padding-right: 30px;\\n  font-size: 18px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcGF0aWVudC9wcm9maWxlL3Byb2ZpbGUucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQjtBQUFoQjtFQUNFLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7QUFFRjtBQUFBO0VBQ0UsdUJBQUE7QUFHRjtBQUFBO0VBQ0Usb0VBQUE7RUFHQSxjQUFBO0FBQ0Y7QUFDRTtFQUNFLGFBQUE7QUFDSjtBQUNJO0VBQ0UsWUFBQTtFQUNBLGFBQUE7RUFDQSxrQkFBQTtFQUNBLGNBQUE7QUFDTjtBQUNNO0VBQ0UsY0FBQTtFQUNBLGtCQUFBO0VBQ0Esa0JBQUE7RUFDQSwrQkFBQTtFQUNBLHlDQUFBO0VBQ0Esc0JBQUE7QUFDUjtBQUtBO0VBQ0UseUJBQUE7RUFDQSxhQUFBO0VBQ0Esb0NBQUE7RUFDQSxnQkFBQTtBQUZGO0FBSUU7RUFDRSxpQkFBQTtBQUZKO0FBSUk7RUFDRSxlQUFBO0VBQ0EsZ0JBQUE7RUFDQSxjQUFBO0FBRk47QUFLSTtFQUNFLGNBQUE7RUFDQSxjQUFBO0VBQ0EseUJBQUE7RUFDQSxjQUFBO0FBSE47QUFPQTtFQUNFLGtCQUFBO0VBQ0EsaUJBQUE7RUFDQSw0QkFBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtBQUpGIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvcGF0aWVudC9wcm9maWxlL3Byb2ZpbGUucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGNoYXJzZXQgXCJVVEYtOFwiO1xuaW9uLWNvbnRlbnQge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbmlvbi10b29sYmFyIHtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG59XG5cbi5jYXJkIHtcbiAgYmFja2dyb3VuZDogdXJsKC4vLi4vLi4vLi4vLi4vYXNzZXRzL2ltYWdlcy9kb2N0b3IuanBnKSBuby1yZXBlYXQgdG9wIGNlbnRlci9jb3ZlciBmaXhlZCwgI2ZmZjtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG4uY2FyZCAuaGVhZGVyIHtcbiAgaGVpZ2h0OiAyMDBweDtcbn1cbi5jYXJkIC5oZWFkZXIgLmF2YXRhciB7XG4gIHdpZHRoOiAxNjBweDtcbiAgaGVpZ2h0OiAxNjBweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW46IDAgYXV0bztcbn1cbi5jYXJkIC5oZWFkZXIgLmF2YXRhciBpbWcge1xuICBkaXNwbGF5OiBibG9jaztcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvdHRvbTogY2FsYygtMSAqICg4MHB4ICsgNHB4KSk7XG4gIGJvcmRlcjogOHB4IHNvbGlkIHZhcigtLWlvbi1jb2xvci1zZ3JlZW4pO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xufVxuXG4uY2FyZC1ib2R5IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgcGFkZGluZzogMzBweDtcbiAgaGVpZ2h0OiBjYWxjKDEwMHZoIOKAkyAoMjAwcHggKyA1NnB4KSk7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG4uY2FyZC1ib2R5IC51c2VyLW1ldGEge1xuICBwYWRkaW5nLXRvcDogNDBweDtcbn1cbi5jYXJkLWJvZHkgLnVzZXItbWV0YSAucGxheWVybmFtZSB7XG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgY29sb3I6ICMzMDM5NDA7XG59XG4uY2FyZC1ib2R5IC51c2VyLW1ldGEgLmNvdW50cnkge1xuICBmb250LXNpemU6IDkwJTtcbiAgY29sb3I6ICM5NDllYTY7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIG1hcmdpbjogMCBhdXRvO1xufVxuXG4uaWRlbnRpZmlhbnQge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGZvbnQtc2l6ZTogbWVkaXVtO1xuICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLXNyZWQpO1xuICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xuICBmb250LXNpemU6IDE4cHg7XG59Il19 */\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { LoadingController, ToastController } from '@ionic/angular';\nimport { IProfilePatient } from \"src/app/Interfaces/patient.interface\";\nimport { GlobalDataService } from 'src/app/services/global-data.service';\nimport { PatientService } from \"src/app/services/patient.service\";\nimport { GlobalInteraction } from '../../global.interaction';\n\n@Component({\n  selector: \"app-profile\",\n  templateUrl: \"./profile.page.html\",\n  styleUrls: [\"./profile.page.scss\"],\n})\nexport class ProfilePage implements OnInit {\n  ios: boolean;\n  showSearchbar: boolean;\n  public patientRegisterForm: FormGroup;\n  public _id = \"Identifiant\";\n  public profile: IProfilePatient;\n  private OK = \"ok\";\n  public type_patient;\n  public countries;\n  public cities;\n  public citiesBorn;\n  isLoading = false;\n  public validation_msg = {\n    first_name: [{ type: \"required\", message: \"Prénom obligatoire\" }],\n    last_name: [{ type: \"required\", message: \"Nom obligatoire\" }],\n    date_on_born: [\n      { type: \"required\", message: \"Date de naissance obligatoire\" },\n    ],\n    state: [{ type: \"required\", message: \"Pays obligatoire\" }],\n    city: [{ type: \"required\", message: \"Selectionner un pays , Ville obligatoire\" }],\n    sexe: [{ type: \"required\", message: \"Sexe obligatoire\" }],\n    address: [{ type: \"required\", message: \"Adresse obligatoire\" }],\n    email: [{ type: \"required\", message: \"Email obligatoire\" }],\n    password: [{ type: \"required\", message: \"Mot de passe obligatoire\" }],\n    phone: [{ type: \"required\", message: \"Phone obligatoire\" }],\n    father_name: [{ type: \"required\", message: \"Nom du père obligatoire\" }],\n    mother_name: [{ type: \"required\", message: \"Nom de la mère obligatoire\" }],\n  };\n  constructor(private patienSrvc: PatientService, private globalSrvc: GlobalDataService, private globalInteract: GlobalInteraction, private loadingController: LoadingController) {\n    this.globalSrvc.getCountry().subscribe((result) => {\n      this.countries = result;\n      this.getProfile();\n    });\n  }\n\n  ngOnInit() {\n    this.globalInteract.presentLoading();\n\n  }\n\n  buildForm(data: IProfilePatient) {\n    this.patientRegisterForm = new FormGroup({\n      // lastName: new FormControl(\"\", [Validators.required]),\n      // firstName: new FormControl(\"\", [Validators.required]),\n      birthday: new FormControl(\"\", [Validators.required]),\n      // description: new FormControl(\"\", [Validators.required]),\n      state: new FormControl(\"\", [Validators.required]),\n      countryBorn: new FormControl(\"\", [Validators.required]),\n      city: new FormControl(\"\", [Validators.required]),\n      cityBorn: new FormControl(\"\", [Validators.required]),\n      gender: new FormControl(\"\", [Validators.required]),\n      address: new FormControl(\"\", [Validators.required]),\n      email: new FormControl(\"\", [Validators.required]),\n      phone: new FormControl(\"\", [Validators.required]),\n      // password: new FormControl(\"\", [Validators.required]),\n    });\n\n    if (data.typePatient != 1) {\n      this.patientRegisterForm.addControl(\n        \"father_name\",\n        new FormControl(\"\", [Validators.required])\n      );\n      this.patientRegisterForm.addControl(\n        \"mother_name\",\n        new FormControl(\"\", [Validators.required])\n      );\n    }\n  }\n\n  async update() {\n    if (this.patientRegisterForm.valid) {\n      this.globalInteract.presentLoading();\n\n      Object.keys(this.patientRegisterForm.value).forEach((key) => {\n        // console.log(\"valid\", this.patientRegisterForm.value[key]);\n        const data_updated = {\n          address: this.patientRegisterForm.value[\"address\"],\n          cityBorn: this.patientRegisterForm.value[\"cityBorn\"],\n          countryBorn: this.patientRegisterForm.value[\"countryBorn\"],\n          email: this.patientRegisterForm.value[\"email\"],\n          fatherName: this.patientRegisterForm.value['father_name'] == undefined ? '' : this.patientRegisterForm.value['father_name'],\n          id: this.profile.id,\n          motherName: this.patientRegisterForm.value['father_name'] == undefined ? '' : this.patientRegisterForm.value['mother_name'],\n          nameCity: this.patientRegisterForm.value[\"city\"],\n          nameState: this.patientRegisterForm.value[\"state\"],\n          phone: this.patientRegisterForm.value[\"phone\"],\n        }\n\n        this.patienSrvc.updateProfile(data_updated).subscribe((data) => {\n\n          if (data == this.OK) {\n            this.globalInteract.dismissLoading();\n            this.globalInteract.presentToast('Profile mis à jour');\n          } else {\n            this.globalInteract.presentToast('Profile non mis à jour !!!')\n          }\n        });\n      });\n    } else {\n      // console.log(\"NOT valid\", this.patientRegisterForm);\n\n      Object.keys(this.patientRegisterForm.value).forEach((key) => {\n        // console.log(\"NOT valid\", this.patientRegisterForm.value[key]);\n      });\n    }\n  }\n  //Comparaison select\n  compareFn(e1: any, e2: any): boolean {\n    return e1 && e2 ? e1.id == e2.id : e1 == e2;\n  }\n  compareFnInv(e1: any, e2: any): boolean {\n    return e1 && e2 ? e1 == e2 : e1.id == e2.id;\n  }\n\n  getProfile() {\n\n    this.patienSrvc.getProfile().subscribe(async (data: IProfilePatient[]) => {\n      // console.log(data);\n      this.profile = data[0];\n\n      this.profile.nameState = data[0].namestate;\n      this.globalSrvc.getCity(this.profile.nameState).subscribe(data2 => {\n        this.cities = data2;\n        this.profile.nameCity = data[0].nameCity;\n      })\n      data[0].countryBorn == null ? this.profile.countryBorn = data[0].namestate : this.profile.countryBorn = data[0].countryBorn;\n      this.globalSrvc.getCity(this.profile.countryBorn).subscribe(data3 => {\n        this.citiesBorn = data3;\n        data[0].cityBorn == null ? this.profile.cityBorn = data[0].nameCity : this.profile.cityBorn = data[0].cityBorn;\n        this.globalInteract.dismissLoading()\n      })\n\n      this.profile.dateOnBorn = data[0].dateOnBorn.date;\n      this.profile.createdAt = data[0].createdAt.date;\n      // this.profile.date_on_born = new Date(data.date_on_born);\n      this.buildForm(data[0]);\n      this.type_patient = data[0].typePatient == 1 ? \"Adult\" : \"Enfant\";\n\n    });\n  }\n\n  getKeyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n  }\n\n  getCityByCountry(id) {\n    // console.log(\"LL: ProfilePage -> getCityByCountry -> id\", id)\n    // console.log(\"LL: ProfilePage -> getCityByCountry -> id\", this.profile)\n    this.globalSrvc.getCity(id).subscribe((data) => this.cities = data);\n  }\n  getCityByCountryBorn(id) {\n    // console.log(\"LL: ProfilePage -> getCityByCountryBorn -> id\", id)\n    // console.log(\"LL: ProfilePage -> getCityByCountryBorn -> id\", this.profile)\n    this.globalSrvc.getCity(id).subscribe((data) => this.citiesBorn = data);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ProfilePage } from './profile.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProfilePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProfilePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ProfilePageRoutingModule } from './profile-routing.module';\n\nimport { ProfilePage } from './profile.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ProfilePageRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [ProfilePage]\n})\nexport class ProfilePageModule { }\n","export default \"@charset \\\"UTF-8\\\";\\nion-content {\\n  position: relative;\\n  height: 100%;\\n  width: 100%;\\n}\\nion-toolbar {\\n  background: transparent;\\n}\\n.card {\\n  background: url('doctor.jpg') no-repeat top center/cover fixed, #fff;\\n  margin: 0 auto;\\n}\\n.card .header {\\n  height: 200px;\\n}\\n.card .header .avatar {\\n  width: 160px;\\n  height: 160px;\\n  position: relative;\\n  margin: 0 auto;\\n}\\n.card .header .avatar img {\\n  display: block;\\n  border-radius: 50%;\\n  position: absolute;\\n  bottom: calc(-1 * (80px + 4px));\\n  border: 8px solid var(--ion-color-sgreen);\\n  background-color: #fff;\\n}\\n.card-body {\\n  background-color: #ffffff;\\n  padding: 30px;\\n  height: calc(100vh – (200px + 56px));\\n  overflow: hidden;\\n}\\n.card-body .user-meta {\\n  padding-top: 40px;\\n}\\n.card-body .user-meta .playername {\\n  font-size: 24px;\\n  font-weight: 600;\\n  color: #303940;\\n}\\n.card-body .user-meta .country {\\n  font-size: 90%;\\n  color: #949ea6;\\n  text-transform: uppercase;\\n  margin: 0 auto;\\n}\\n.identifiant {\\n  font-style: italic;\\n  font-size: medium;\\n  color: var(--ion-color-sred);\\n  padding-right: 30px;\\n  font-size: 18px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcHJhdGljaWVuL3Byb2ZpbGUvcHJvZmlsZS5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCO0FBQWhCO0VBQ0Usa0JBQUE7RUFDQSxZQUFBO0VBQ0EsV0FBQTtBQUVGO0FBQUE7RUFDRSx1QkFBQTtBQUdGO0FBQUE7RUFDRSxvRUFBQTtFQUdBLGNBQUE7QUFDRjtBQUNFO0VBQ0UsYUFBQTtBQUNKO0FBQ0k7RUFDRSxZQUFBO0VBQ0EsYUFBQTtFQUNBLGtCQUFBO0VBQ0EsY0FBQTtBQUNOO0FBQ007RUFDRSxjQUFBO0VBQ0Esa0JBQUE7RUFDQSxrQkFBQTtFQUNBLCtCQUFBO0VBQ0EseUNBQUE7RUFDQSxzQkFBQTtBQUNSO0FBS0E7RUFDRSx5QkFBQTtFQUNBLGFBQUE7RUFDQSxvQ0FBQTtFQUNBLGdCQUFBO0FBRkY7QUFJRTtFQUNFLGlCQUFBO0FBRko7QUFJSTtFQUNFLGVBQUE7RUFDQSxnQkFBQTtFQUNBLGNBQUE7QUFGTjtBQUtJO0VBQ0UsY0FBQTtFQUNBLGNBQUE7RUFDQSx5QkFBQTtFQUNBLGNBQUE7QUFITjtBQU9BO0VBQ0Usa0JBQUE7RUFDQSxpQkFBQTtFQUNBLDRCQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0FBSkYiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9wcmF0aWNpZW4vcHJvZmlsZS9wcm9maWxlLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIkBjaGFyc2V0IFwiVVRGLThcIjtcbmlvbi1jb250ZW50IHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG5pb24tdG9vbGJhciB7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuXG4uY2FyZCB7XG4gIGJhY2tncm91bmQ6IHVybCguLy4uLy4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvZG9jdG9yLmpwZykgbm8tcmVwZWF0IHRvcCBjZW50ZXIvY292ZXIgZml4ZWQsICNmZmY7XG4gIG1hcmdpbjogMCBhdXRvO1xufVxuLmNhcmQgLmhlYWRlciB7XG4gIGhlaWdodDogMjAwcHg7XG59XG4uY2FyZCAuaGVhZGVyIC5hdmF0YXIge1xuICB3aWR0aDogMTYwcHg7XG4gIGhlaWdodDogMTYwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG4uY2FyZCAuaGVhZGVyIC5hdmF0YXIgaW1nIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IGNhbGMoLTEgKiAoODBweCArIDRweCkpO1xuICBib3JkZXI6IDhweCBzb2xpZCB2YXIoLS1pb24tY29sb3Itc2dyZWVuKTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbn1cblxuLmNhcmQtYm9keSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gIHBhZGRpbmc6IDMwcHg7XG4gIGhlaWdodDogY2FsYygxMDB2aCDigJMgKDIwMHB4ICsgNTZweCkpO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLmNhcmQtYm9keSAudXNlci1tZXRhIHtcbiAgcGFkZGluZy10b3A6IDQwcHg7XG59XG4uY2FyZC1ib2R5IC51c2VyLW1ldGEgLnBsYXllcm5hbWUge1xuICBmb250LXNpemU6IDI0cHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiAjMzAzOTQwO1xufVxuLmNhcmQtYm9keSAudXNlci1tZXRhIC5jb3VudHJ5IHtcbiAgZm9udC1zaXplOiA5MCU7XG4gIGNvbG9yOiAjOTQ5ZWE2O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBtYXJnaW46IDAgYXV0bztcbn1cblxuLmlkZW50aWZpYW50IHtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBmb250LXNpemU6IG1lZGl1bTtcbiAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1zcmVkKTtcbiAgcGFkZGluZy1yaWdodDogMzBweDtcbiAgZm9udC1zaXplOiAxOHB4O1xufSJdfQ== */\";","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { LoadingController, ToastController } from '@ionic/angular';\nimport { IProfilePatient } from \"src/app/Interfaces/patient.interface\";\nimport { GlobalDataService } from 'src/app/services/global-data.service';\nimport { PatientService } from \"src/app/services/patient.service\";\nimport { PraticienService } from 'src/app/services/praticien.service';\nimport { GlobalInteraction } from '../../global.interaction';\n\n@Component({\n  selector: \"app-profile\",\n  templateUrl: \"./profile.page.html\",\n  styleUrls: [\"./profile.page.scss\"],\n})\nexport class ProfilePage implements OnInit {\n  ios: boolean;\n  showSearchbar: boolean;\n  public praticienFormGroup: FormGroup;\n  public _id = \"Identifiant\";\n  public profile;\n  private OK = \"ok\";\n  public centre_name;\n  public countries;\n  public cities;\n  public citiesBorn;\n  isLoading = false;\n  public validation_msg = {\n    first_name: [{ type: \"required\", message: \"Prénom obligatoire\" }],\n    last_name: [{ type: \"required\", message: \"Nom obligatoire\" }],\n    date_on_born: [\n      { type: \"required\", message: \"Date de naissance obligatoire\" },\n    ],\n    state: [{ type: \"required\", message: \"Pays obligatoire\" }],\n    city: [{ type: \"required\", message: \"Selectionner un pays , Ville obligatoire\" }],\n    sexe: [{ type: \"required\", message: \"Sexe obligatoire\" }],\n    address: [{ type: \"required\", message: \"Adresse obligatoire\" }],\n    email: [{ type: \"required\", message: \"Email obligatoire\" }],\n    password: [{ type: \"required\", message: \"Mot de passe obligatoire\" }],\n    phone: [{ type: \"required\", message: \"Phone obligatoire\" }],\n    father_name: [{ type: \"required\", message: \"Nom du père obligatoire\" }],\n    mother_name: [{ type: \"required\", message: \"Nom de la mère obligatoire\" }],\n  };\n  constructor(private praticienSrvc: PraticienService, private globalSrvc: GlobalDataService, private globalInteract: GlobalInteraction, private loadingController: LoadingController) {\n    this.globalSrvc.getCountry().subscribe((result) => {\n      this.countries = result;\n      this.getProfile();\n    });\n  }\n\n  ngOnInit() {\n    this.globalInteract.presentLoading();\n\n  }\n\n  buildForm(data: IProfilePatient) {\n    this.praticienFormGroup = new FormGroup({\n      // lastName: new FormControl(\"\", [Validators.required]),\n      // firstName: new FormControl(\"\", [Validators.required]),\n      birthday: new FormControl(\"\", [Validators.required]),\n      // description: new FormControl(\"\", [Validators.required]),\n      state: new FormControl(\"\", [Validators.required]),\n      countryBorn: new FormControl(\"\", [Validators.required]),\n      city: new FormControl(\"\", [Validators.required]),\n      cityBorn: new FormControl(\"\", [Validators.required]),\n      gender: new FormControl(\"\", [Validators.required]),\n      address: new FormControl(\"\", [Validators.required]),\n      email: new FormControl(\"\", [Validators.required]),\n      phone: new FormControl(\"\", [Validators.required]),\n      // password: new FormControl(\"\", [Validators.required]),\n    });\n\n\n  }\n\n  async update() {\n    if (this.praticienFormGroup.valid) {\n      this.globalInteract.presentLoading();\n\n      Object.keys(this.praticienFormGroup.value).forEach((key) => {\n        // console.log(\"valid\", this.praticienFormGroup.value[key]);\n        const data_updated = {\n          address: this.praticienFormGroup.value[\"address\"],\n          cityBorn: this.praticienFormGroup.value[\"cityBorn\"],\n          countryBorn: this.praticienFormGroup.value[\"countryBorn\"],\n          email: this.praticienFormGroup.value[\"email\"],\n          fatherName: this.praticienFormGroup.value['father_name'] == undefined ? '' : this.praticienFormGroup.value['father_name'],\n          id: this.profile.id,\n          motherName: this.praticienFormGroup.value['father_name'] == undefined ? '' : this.praticienFormGroup.value['mother_name'],\n          nameCity: this.praticienFormGroup.value[\"city\"],\n          nameState: this.praticienFormGroup.value[\"state\"],\n          phone: this.praticienFormGroup.value[\"phone\"],\n        }\n      });\n    } else {\n      // console.log(\"NOT valid\", this.praticienFormGroup);\n\n      Object.keys(this.praticienFormGroup.value).forEach((key) => {\n        // console.log(\"NOT valid\", this.praticienFormGroup.value[key]);\n      });\n    }\n  }\n  //Comparaison select\n  compareFn(e1: any, e2: any): boolean {\n    return e1 && e2 ? e1.id == e2.id : e1 == e2;\n  }\n  compareFnInv(e1: any, e2: any): boolean {\n    return e1 && e2 ? e1 == e2 : e1.id == e2.id;\n  }\n\n  getProfile() {\n\n    this.praticienSrvc.getProfile().subscribe(async (response: any) => {\n      const data = response.profile;\n      this.centre_name = response.profile[1].centreName;\n      // console.log(data);\n      this.profile = data[0];\n\n      this.profile.nameState = data[0].countryFonction;\n      this.globalSrvc.getCity(this.profile.nameState).subscribe(data2 => {\n        this.cities = data2;\n        this.profile.nameCity = data[0].CityFonction;\n      })\n      data[0].countryBorn == null ? this.profile.countryBorn = data[0].countryFonction : this.profile.countryBorn = data[0].countryBorn;\n      this.globalSrvc.getCity(this.profile.countryBorn).subscribe(data3 => {\n        this.citiesBorn = data3;\n        data[0].cityBorn == null ? this.profile.cityBorn = data[0].CityFonction : this.profile.cityBorn = data[0].cityBorn;\n        this.globalInteract.dismissLoading()\n      })\n\n      this.profile.dateOnBorn = data[0].dateBorn.date;\n      this.profile.createdAt = data[0].createdAt.date;\n      // this.profile.date_on_born = new Date(data.date_on_born);\n      this.buildForm(data[0]);\n      // this.type_patient = data[0].typePatient == 1 ? \"Adult\" : \"Enfant\";\n\n    });\n  }\n\n  getKeyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n  }\n\n  getCityByCountry(id) {\n    // console.log(\"LL: ProfilePage -> getCityByCountry -> id\", id)\n    // console.log(\"LL: ProfilePage -> getCityByCountry -> id\", this.profile)\n    this.globalSrvc.getCity(id).subscribe((data) => this.cities = data);\n  }\n  getCityByCountryBorn(id) {\n    // console.log(\"LL: ProfilePage -> getCityByCountryBorn -> id\", id)\n    // console.log(\"LL: ProfilePage -> getCityByCountryBorn -> id\", this.profile)\n    this.globalSrvc.getCity(id).subscribe((data) => this.citiesBorn = data);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { IUserPraticien } from '../Interfaces/praticien.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalDataService {\n  private url = environment.url_dev;\n  private url_api = environment.url_dev_api;\n  constructor(public http: HttpClient) { }\n\n  getCountry(): Observable<any> {\n    const res = this.http.get<any>(this.url_api + \"country\");\n    res.subscribe(data => {\n      // console.log(\"GlobalDataService -> getCountry -> data\", data)\n    })\n    return res;\n  }\n\n  getCity(id): Observable<any> {\n    const res = this.http.get<any>(this.url_api + `city?id=${id}`);\n    // console.log(\"GlobalDataService -> constructor -> this.url_api + `city?id=${id}`\", this.url_api + `city?id=${id}`)\n    res.subscribe(data => {\n      // console.log(\"GlobalDataService -> getCity -> data\", data)\n    })\n    return res;\n  }\n\n  getCountryByPratictitionerFunction(_idPractitionerFunction) {\n    const res = this.http.post(`${this.url_api}country/fonction`, { id_fonction: _idPractitionerFunction });\n    return res;\n  }\n\n  getCityByPractitionerFunctionAndCountry(_idPractitionerFunction, _idCountry) {\n    const res = this.http.post(`${this.url_api}city/fonction`, { id_fonction: _idPractitionerFunction, id_country: _idCountry });\n    return res;\n  }\n\n  getPractitionerByFunctionCountryAndCity(_idPractitionerFunction, _idCountry, _idCity) {\n    const res = this.http.post(`${this.url_api}praticien/fonction`, { id_fonction: _idPractitionerFunction, id_country: _idCountry, id_city: _idCity });\n    return res;\n  }\n\n  getCenterHealthByCity(_idCity) {\n    const res = this.http.post(`${this.url_api}praticien/centre`, { id: _idCity });\n    return res;\n  }\n\n  getPraticienByCenter(_idCenter) {\n    const res = this.http.post(`${this.url_api}centre/praticien`, { id: _idCenter });\n    return res;\n  }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { IPatient, IRegisterPatient, IVaccinPatient, IProfilePatient, IPatientFamilyGroup } from \"../Interfaces/patient.interface\";\n\nimport { from } from \"rxjs\";\nimport { CONSTANT } from \"src/constant\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport { IUserPraticien } from '../Interfaces/praticien.interface';\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class PatientService {\n  private url = environment.url_dev;\n  private url_api = environment.url_dev_api;\n  private url_apip = environment.url_dev;\n  private rdvData;\n  constructor(public http: HttpClient) { }\n\n  // TODO Get Patients\n  getPatients(): Observable<IPatient[]> {\n    return this.http.get<IPatient[]>(this.url + \"patients\");\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockPatient;\n    //   })\n    // );\n  }\n\n  getAllRdv() {\n    return this.http.get(`${this.url_apip}patients/rdv`);\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockRdvListPatient;\n    //   })\n    // );\n  }\n\n  getTracksRdv(excludeTracks?) {\n    return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n      map((data: any) => {\n        // console.log(\"PatientService -> getTracksRdv -> data\", excludeTracks);\n        return data;\n      })\n    );\n  }\n\n  //TODO : Get Vaccin by patient\n  getVaccinByPatient() {\n    return this.http.get<IVaccinPatient[]>(`${this.url_apip}patients/vaccination`);\n\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockVaccinPatient;\n    //   })\n    // );\n  }\n\n  registerPatient(data: IRegisterPatient) {\n    return this.http.post<IRegisterPatient>(`${this.url_api}users`, data);\n    Object.keys(data).forEach((element) => {\n      console.log(\"PatientService -> registerPatient -> element\", element);\n      console.log(\"register => \", data[element]);\n    });\n  }\n\n  getProfile() {\n    return this.http.get<IProfilePatient[]>(`${this.url_apip}patient/profile`);\n\n    // return this.http.get(CONSTANT.MOCK_DATA_JSON).pipe(\n    //   map((data: any) => {\n    //     return data.mockPatientProfile;\n    //   })\n    // );\n  }\n\n  updateProfile(data) {\n    return this.http.post(`${this.url_apip}patient/profile/edit`, data);\n  }\n\n  getAssociatedPraticians(): Observable<IUserPraticien[]> {\n    const res = this.http.get<IUserPraticien[]>(`${this.url_apip}patients/praticien`);\n    res.subscribe(data => {\n      console.log(\"PatientService -> constructor -> res\", data);\n    })\n    return res;\n  }\n\n  getFamily() {\n    const res = this.http.get(`${this.url_apip}patients/family`);\n    res.subscribe(data => console.log(\"PatientService -> getFamily -> res\", data))\n    return res;\n  }\n\n  addGroupFamily(nomGroupe) {\n    const data = {\n      designation: nomGroupe,\n    }\n    console.log(\"LL: PatientService -> addGroupFamily -> data\", data)\n    const res = this.http.post(`${this.url_apip}register/group`, data);\n    return res;\n  }\n\n  addGroupFamilyMember(data) {\n    console.log(\"PatientService -> addGroupFamilyMember -> data\", data)\n    const res = this.http.post(`${this.url_api}add/membres`, data);\n    return res;\n  }\n\n  deleteFamilyMember(_idFamily) {\n    const res = this.http.delete(`${this.url_api}family/${_idFamily}`);\n    return res;\n  }\n\n  interventionPraticien(data) {\n    console.log(\"####################LL: PatientService -> interventionPraticien -> data\", data)\n    const res = this.http.post(`${this.url_apip}intervention`, data);\n    return res;\n  }\n\n  chekIfPractitionerIsAssociated(_idPraticien) {\n    const res = this.http.get(`${this.url_apip}patients/check-association/${_idPraticien}`);\n    return res;\n  }\n\n  proposeRdv(data) {\n    const res = this.http.post(`${this.url_apip}add/rdv`, data);\n    return res;\n  }\n\n  cancelRdvProposition(data) {\n    const res = this.http.post(`${this.url_api}cancel/rdv`, data);\n    return res;\n  }\n\n  postVaccinGeneration(_idPraticien) {\n    const res = this.http.post(`${this.url_apip}patient/generation`, { praticien: _idPraticien });\n    return res;\n  }\n\n}\n"]}